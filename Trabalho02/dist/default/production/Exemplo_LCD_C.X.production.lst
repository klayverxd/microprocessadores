

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Sun Nov 27 01:48:02 2022

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1,inline
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=2
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=2
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1
    16                           	psect	text8,global,reloc=2,class=CODE,delta=1
    17                           	psect	text9,global,reloc=2,class=CODE,delta=1
    18                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    19                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    20                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    21   000000                     
    22                           ; Version 2.40
    23                           ; Generated 04/07/2022 GMT
    24                           ; 
    25                           ; Copyright Â© 2022, Microchip Technology Inc. and its subsidiaries ("Microchip")
    26                           ; All rights reserved.
    27                           ; 
    28                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    29                           ; 
    30                           ; Redistribution and use in source and binary forms, with or without modification, are
    31                           ; permitted provided that the following conditions are met:
    32                           ; 
    33                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    34                           ;        conditions and the following disclaimer.
    35                           ; 
    36                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    37                           ;        of conditions and the following disclaimer in the documentation and/or other
    38                           ;        materials provided with the distribution. Publication is not required when
    39                           ;        this file is used in an embedded application.
    40                           ; 
    41                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    42                           ;        software without specific prior written permission.
    43                           ; 
    44                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    45                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    46                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    47                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    48                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    49                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    50                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    51                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    52                           ; 
    53                           ; 
    54                           ; Code-generator required, PIC18F4550 Definitions
    55                           ; 
    56                           ; SFR Addresses
    57   000000                     
    58                           	psect	smallconst
    59   000800                     __psmallconst:
    60                           	callstack 0
    61   000800  00                 	db	0
    62   000801                     _dpowers:
    63                           	callstack 0
    64   000801  0001               	dw	1
    65   000803  0000               	dw	0
    66   000805  000A               	dw	10
    67   000807  0000               	dw	0
    68   000809  0064               	dw	100
    69   00080B  0000               	dw	0
    70   00080D  03E8               	dw	1000
    71   00080F  0000               	dw	0
    72   000811  2710               	dw	10000
    73   000813  0000               	dw	0
    74   000815  86A0               	dw	34464
    75   000817  0001               	dw	1
    76   000819  4240               	dw	16960
    77   00081B  000F               	dw	15
    78   00081D  9680               	dw	38528
    79   00081F  0098               	dw	152
    80   000821  E100               	dw	57600
    81   000823  05F5               	dw	1525
    82   000825  CA00               	dw	51712
    83   000827  3B9A               	dw	15258
    84   000829                     __end_of_dpowers:
    85                           	callstack 0
    86   000000                     _PORTDbits	set	3971
    87   000000                     _PORTBbits	set	3969
    88   000000                     _PORTD	set	3971
    89   000000                     _TRISB	set	3987
    90   000000                     _TRISD	set	3989
    91   000829                     STR_1:
    92   000829  41                 	db	65	;'A'
    93   00082A  70                 	db	112	;'p'
    94   00082B  65                 	db	101	;'e'
    95   00082C  72                 	db	114	;'r'
    96   00082D  74                 	db	116	;'t'
    97   00082E  65                 	db	101	;'e'
    98   00082F  20                 	db	32
    99   000830  70                 	db	112	;'p'
   100   000831  61                 	db	97	;'a'
   101   000832  72                 	db	114	;'r'
   102   000833  61                 	db	97	;'a'
   103   000834  20                 	db	32
   104   000835  69                 	db	105	;'i'
   105   000836  6E                 	db	110	;'n'
   106   000837  69                 	db	105	;'i'
   107   000838  63                 	db	99	;'c'
   108   000839  69                 	db	105	;'i'
   109   00083A  61                 	db	97	;'a'
   110   00083B  72                 	db	114	;'r'
   111   00083C  00                 	db	0
   112   00083D  52                 	db	82	;'R'
   113   00083E  65                 	db	101	;'e'
   114   00083F  69                 	db	105	;'i'
   115   000840  6E                 	db	110	;'n'
   116   000841  69                 	db	105	;'i'
   117   000842  63                 	db	99	;'c'
   118   000843  69                 	db	105	;'i'
   119   000844  61                 	db	97	;'a'
   120   000845  6E                 	db	110	;'n'
   121   000846  64                 	db	100	;'d'
   122   000847  6F                 	db	111	;'o'
   123   000848  2E                 	db	46
   124   000849  2E                 	db	46
   125   00084A  2E                 	db	46
   126   00084B  00                 	db	0
   127   00084C                     STR_4:
   128   00084C  54                 	db	84	;'T'
   129   00084D  65                 	db	101	;'e'
   130   00084E  6D                 	db	109	;'m'
   131   00084F  70                 	db	112	;'p'
   132   000850  6F                 	db	111	;'o'
   133   000851  20                 	db	32
   134   000852  31                 	db	49	;'1'
   135   000853  3A                 	db	58	;':'
   136   000854  20                 	db	32
   137   000855  25                 	db	37
   138   000856  6C                 	db	108	;'l'
   139   000857  64                 	db	100	;'d'
   140   000858  6D                 	db	109	;'m'
   141   000859  73                 	db	115	;'s'
   142   00085A  00                 	db	0
   143   00085B                     STR_5:
   144   00085B  54                 	db	84	;'T'
   145   00085C  65                 	db	101	;'e'
   146   00085D  6D                 	db	109	;'m'
   147   00085E  70                 	db	112	;'p'
   148   00085F  6F                 	db	111	;'o'
   149   000860  20                 	db	32
   150   000861  32                 	db	50	;'2'
   151   000862  3A                 	db	58	;':'
   152   000863  20                 	db	32
   153   000864  25                 	db	37
   154   000865  6C                 	db	108	;'l'
   155   000866  64                 	db	100	;'d'
   156   000867  6D                 	db	109	;'m'
   157   000868  73                 	db	115	;'s'
   158   000869  00                 	db	0
   159   00086A                     STR_2:
   160   00086A  52                 	db	82	;'R'
   161   00086B  6F                 	db	111	;'o'
   162   00086C  64                 	db	100	;'d'
   163   00086D  61                 	db	97	;'a'
   164   00086E  6E                 	db	110	;'n'
   165   00086F  64                 	db	100	;'d'
   166   000870  6F                 	db	111	;'o'
   167   000871  2E                 	db	46
   168   000872  2E                 	db	46
   169   000873  2E                 	db	46
   170   000874  00                 	db	0
   171   000875  00                 	db	0	; dummy byte at the end
   172   000000                     
   173                           ; #config settings
   174                           
   175                           	psect	cinit
   176   000E2A                     __pcinit:
   177                           	callstack 0
   178   000E2A                     start_initialization:
   179                           	callstack 0
   180   000E2A                     __initialization:
   181                           	callstack 0
   182   000E2A                     end_of_initialization:
   183                           	callstack 0
   184   000E2A                     __end_of__initialization:
   185                           	callstack 0
   186   000E2A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   187   000E2C  6EF8               	movwf	tblptru,c
   188   000E2E  0100               	movlb	0
   189   000E30  EF4E  F005         	goto	_main	;jump to C main() function
   190                           
   191                           	psect	cstackCOMRAM
   192   000001                     __pcstackCOMRAM:
   193                           	callstack 0
   194   000001                     ??_envia_nibble_lcd:
   195   000001                     ?___lldiv:
   196                           	callstack 0
   197   000001                     ___lldiv@dividend:
   198                           	callstack 0
   199                           
   200                           ; 4 bytes @ 0x0
   201   000001                     	ds	1
   202   000002                     envia_nibble_lcd@dado:
   203                           	callstack 0
   204                           
   205                           ; 1 bytes @ 0x1
   206   000002                     	ds	1
   207   000003                     envia_byte_lcd@dado:
   208                           	callstack 0
   209                           
   210                           ; 1 bytes @ 0x2
   211   000003                     	ds	1
   212   000004                     envia_byte_lcd@endereco:
   213                           	callstack 0
   214                           
   215                           ; 1 bytes @ 0x3
   216   000004                     	ds	1
   217   000005                     ??_inicializa_lcd:
   218   000005                     ??_limpa_lcd:
   219   000005                     escreve_lcd@c:
   220                           	callstack 0
   221   000005                     ___lldiv@divisor:
   222                           	callstack 0
   223                           
   224                           ; 4 bytes @ 0x4
   225   000005                     	ds	1
   226   000006                     putch@data:
   227                           	callstack 0
   228                           
   229                           ; 1 bytes @ 0x5
   230   000006                     	ds	3
   231   000009                     ___lldiv@quotient:
   232                           	callstack 0
   233                           
   234                           ; 4 bytes @ 0x8
   235   000009                     	ds	4
   236   00000D                     ___lldiv@counter:
   237                           	callstack 0
   238                           
   239                           ; 1 bytes @ 0xC
   240   00000D                     	ds	1
   241   00000E                     ?___llmod:
   242                           	callstack 0
   243   00000E                     ___llmod@dividend:
   244                           	callstack 0
   245                           
   246                           ; 4 bytes @ 0xD
   247   00000E                     	ds	4
   248   000012                     ___llmod@divisor:
   249                           	callstack 0
   250                           
   251                           ; 4 bytes @ 0x11
   252   000012                     	ds	4
   253   000016                     ___llmod@counter:
   254                           	callstack 0
   255                           
   256                           ; 1 bytes @ 0x15
   257   000016                     	ds	1
   258   000017                     ?_printf:
   259                           	callstack 0
   260   000017                     printf@f:
   261                           	callstack 0
   262                           
   263                           ; 2 bytes @ 0x16
   264   000017                     	ds	6
   265   00001D                     ??_printf:
   266                           
   267                           ; 1 bytes @ 0x1C
   268   00001D                     	ds	2
   269   00001F                     printf@prec:
   270                           	callstack 0
   271                           
   272                           ; 2 bytes @ 0x1E
   273   00001F                     	ds	2
   274   000021                     printf@ap:
   275                           	callstack 0
   276                           
   277                           ; 2 bytes @ 0x20
   278   000021                     	ds	2
   279   000023                     printf@flag:
   280                           	callstack 0
   281                           
   282                           ; 1 bytes @ 0x22
   283   000023                     	ds	1
   284   000024                     printf@val:
   285                           	callstack 0
   286                           
   287                           ; 4 bytes @ 0x23
   288   000024                     	ds	4
   289   000028                     printf@c:
   290                           	callstack 0
   291                           
   292                           ; 1 bytes @ 0x27
   293   000028                     	ds	1
   294   000029                     main@counter:
   295                           	callstack 0
   296                           
   297                           ; 4 bytes @ 0x28
   298   000029                     	ds	4
   299   00002D                     main@start_reset:
   300                           	callstack 0
   301                           
   302                           ; 2 bytes @ 0x2C
   303   00002D                     	ds	2
   304                           
   305 ;;
   306 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   307 ;;
   308 ;; *************** function _main *****************
   309 ;; Defined at:
   310 ;;		line 69 in file "main.c"
   311 ;; Parameters:    Size  Location     Type
   312 ;;		None
   313 ;; Auto vars:     Size  Location     Type
   314 ;;  start_reset     2   44[COMRAM] int 
   315 ;;  counter         4   40[COMRAM] long 
   316 ;; Return value:  Size  Location     Type
   317 ;;                  1    wreg      void 
   318 ;; Registers used:
   319 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   320 ;; Tracked objects:
   321 ;;		On entry : 0/0
   322 ;;		On exit  : 0/0
   323 ;;		Unchanged: 0/0
   324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   325 ;;      Params:         0       0       0       0       0       0       0       0       0
   326 ;;      Locals:         6       0       0       0       0       0       0       0       0
   327 ;;      Temps:          0       0       0       0       0       0       0       0       0
   328 ;;      Totals:         6       0       0       0       0       0       0       0       0
   329 ;;Total ram usage:        6 bytes
   330 ;; Hardware stack levels required when called: 5
   331 ;; This function calls:
   332 ;;		_inicializa_lcd
   333 ;;		_limpa_lcd
   334 ;;		_printf
   335 ;; This function is called by:
   336 ;;		Startup code after reset
   337 ;; This function uses a non-reentrant model
   338 ;;
   339                           
   340                           	psect	text0
   341   000A9C                     __ptext0:
   342                           	callstack 0
   343   000A9C                     _main:
   344                           	callstack 26
   345   000A9C                     
   346                           ;main.c: 70:     long int counter = 0;
   347   000A9C  0E00               	movlw	0
   348   000A9E  6E29               	movwf	main@counter^0,c
   349   000AA0  0E00               	movlw	0
   350   000AA2  6E2A               	movwf	(main@counter+1)^0,c
   351   000AA4  0E00               	movlw	0
   352   000AA6  6E2B               	movwf	(main@counter+2)^0,c
   353   000AA8  0E00               	movlw	0
   354   000AAA  6E2C               	movwf	(main@counter+3)^0,c
   355                           
   356                           ;main.c: 71:     PORTD = 0;
   357   000AAC  0E00               	movlw	0
   358   000AAE  6E83               	movwf	131,c	;volatile
   359                           
   360                           ;main.c: 72:     TRISD = 0x00;
   361   000AB0  0E00               	movlw	0
   362   000AB2  6E95               	movwf	149,c	;volatile
   363   000AB4                     
   364                           ;main.c: 74:     PORTBbits.RB0 = 0x00;
   365   000AB4  9081               	bcf	129,0,c	;volatile
   366                           
   367                           ;main.c: 75:     TRISB = 0x01;
   368   000AB6  0E01               	movlw	1
   369   000AB8  6E93               	movwf	147,c	;volatile
   370   000ABA                     
   371                           ;main.c: 77:     inicializa_lcd();
   372   000ABA  ECAE  F006         	call	_inicializa_lcd	;wreg free
   373   000ABE                     
   374                           ;main.c: 78:     limpa_lcd();
   375   000ABE  EC01  F007         	call	_limpa_lcd	;wreg free
   376   000AC2                     
   377                           ;main.c: 80:     printf("Aperte para iniciar");
   378   000AC2  0E29               	movlw	low STR_1
   379   000AC4  6E17               	movwf	printf@f^0,c
   380   000AC6  0E08               	movlw	high STR_1
   381   000AC8  6E18               	movwf	(printf@f+1)^0,c
   382   000ACA  EC3B  F004         	call	_printf	;wreg free
   383   000ACE                     l1203:
   384                           
   385                           ;main.c: 82:         int start_reset = 0;
   386   000ACE  0E00               	movlw	0
   387   000AD0  6E2E               	movwf	(main@start_reset+1)^0,c
   388   000AD2  0E00               	movlw	0
   389   000AD4  6E2D               	movwf	main@start_reset^0,c
   390   000AD6                     
   391                           ;main.c: 84:         if(PORTBbits.RB0 == 0x01 && start_reset == 0){
   392   000AD6  A081               	btfss	129,0,c	;volatile
   393   000AD8  EF70  F005         	goto	u371
   394   000ADC  EF72  F005         	goto	u370
   395   000AE0                     u371:
   396   000AE0  EF80  F005         	goto	l27
   397   000AE4                     u370:
   398   000AE4                     
   399                           ;main.c: 85:             limpa_lcd();
   400   000AE4  EC01  F007         	call	_limpa_lcd	;wreg free
   401   000AE8                     
   402                           ;main.c: 86:             printf("Rodando...");
   403   000AE8  0E6A               	movlw	low STR_2
   404   000AEA  6E17               	movwf	printf@f^0,c
   405   000AEC  0E08               	movlw	high STR_2
   406   000AEE  6E18               	movwf	(printf@f+1)^0,c
   407   000AF0  EC3B  F004         	call	_printf	;wreg free
   408   000AF4                     
   409                           ;main.c: 87:             start_reset = 1;
   410   000AF4  0E00               	movlw	0
   411   000AF6  6E2E               	movwf	(main@start_reset+1)^0,c
   412   000AF8  0E01               	movlw	1
   413   000AFA  6E2D               	movwf	main@start_reset^0,c
   414                           
   415                           ;main.c: 88:         } else if (PORTBbits.RB0 == 0x01 && start_reset == 1) {
   416   000AFC  EFC7  F005         	goto	l1241
   417   000B00                     l27:
   418   000B00  5081               	movf	129,w,c	;volatile
   419   000B02  EFC7  F005         	goto	l1241
   420   000B06                     l1223:
   421                           
   422                           ;main.c: 95:             _delay((unsigned long)((1)*(4000000/4000.0)));
   423   000B06  0EC8               	movlw	200
   424   000B08                     u437:
   425   000B08  D000               	nop2	
   426   000B0A  2EE8               	decfsz	wreg,f,c
   427   000B0C  D7FD               	bra	u437
   428   000B0E                     
   429                           ;main.c: 96:             counter++;
   430   000B0E  0E01               	movlw	1
   431   000B10  2629               	addwf	main@counter^0,f,c
   432   000B12  0E00               	movlw	0
   433   000B14  222A               	addwfc	(main@counter+1)^0,f,c
   434   000B16  222B               	addwfc	(main@counter+2)^0,f,c
   435   000B18  222C               	addwfc	(main@counter+3)^0,f,c
   436   000B1A                     
   437                           ;main.c: 98:             if(PORTBbits.RB1 == 0x01){
   438   000B1A  A281               	btfss	129,1,c	;volatile
   439   000B1C  EF92  F005         	goto	u381
   440   000B20  EF94  F005         	goto	u380
   441   000B24                     u381:
   442   000B24  EFAE  F005         	goto	l32
   443   000B28                     u380:
   444   000B28                     
   445                           ;main.c: 99:                 limpa_lcd();
   446   000B28  EC01  F007         	call	_limpa_lcd	;wreg free
   447   000B2C                     
   448                           ;main.c: 100:                 printf("Tempo 1: %ldms", counter);
   449   000B2C  0E4C               	movlw	low STR_4
   450   000B2E  6E17               	movwf	printf@f^0,c
   451   000B30  0E08               	movlw	high STR_4
   452   000B32  6E18               	movwf	(printf@f+1)^0,c
   453   000B34  C029  F019         	movff	main@counter,?_printf+2
   454   000B38  C02A  F01A         	movff	main@counter+1,?_printf+3
   455   000B3C  C02B  F01B         	movff	main@counter+2,?_printf+4
   456   000B40  C02C  F01C         	movff	main@counter+3,?_printf+5
   457   000B44  EC3B  F004         	call	_printf	;wreg free
   458   000B48                     l1233:
   459                           
   460                           ;main.c: 101:                 counter = 0;
   461   000B48  0E00               	movlw	0
   462   000B4A  6E29               	movwf	main@counter^0,c
   463   000B4C  0E00               	movlw	0
   464   000B4E  6E2A               	movwf	(main@counter+1)^0,c
   465   000B50  0E00               	movlw	0
   466   000B52  6E2B               	movwf	(main@counter+2)^0,c
   467   000B54  0E00               	movlw	0
   468   000B56  6E2C               	movwf	(main@counter+3)^0,c
   469                           
   470                           ;main.c: 102:                 break;
   471   000B58  EF67  F005         	goto	l1203
   472   000B5C                     l32:
   473                           
   474                           ;main.c: 105:             if(PORTBbits.RB2 == 0x01){
   475   000B5C  A481               	btfss	129,2,c	;volatile
   476   000B5E  EFB3  F005         	goto	u391
   477   000B62  EFB5  F005         	goto	u390
   478   000B66                     u391:
   479   000B66  EFC7  F005         	goto	l1241
   480   000B6A                     u390:
   481   000B6A                     
   482                           ;main.c: 106:                 limpa_lcd();
   483   000B6A  EC01  F007         	call	_limpa_lcd	;wreg free
   484   000B6E                     
   485                           ;main.c: 107:                 printf("Tempo 2: %ldms", counter);
   486   000B6E  0E5B               	movlw	low STR_5
   487   000B70  6E17               	movwf	printf@f^0,c
   488   000B72  0E08               	movlw	high STR_5
   489   000B74  6E18               	movwf	(printf@f+1)^0,c
   490   000B76  C029  F019         	movff	main@counter,?_printf+2
   491   000B7A  C02A  F01A         	movff	main@counter+1,?_printf+3
   492   000B7E  C02B  F01B         	movff	main@counter+2,?_printf+4
   493   000B82  C02C  F01C         	movff	main@counter+3,?_printf+5
   494   000B86  EC3B  F004         	call	_printf	;wreg free
   495   000B8A  EFA4  F005         	goto	l1233
   496   000B8E                     l1241:
   497                           
   498                           ;main.c: 94:         while(start_reset) {
   499   000B8E  502D               	movf	main@start_reset^0,w,c
   500   000B90  102E               	iorwf	(main@start_reset+1)^0,w,c
   501   000B92  A4D8               	btfss	status,2,c
   502   000B94  EFCE  F005         	goto	u401
   503   000B98  EFD0  F005         	goto	u400
   504   000B9C                     u401:
   505   000B9C  EF83  F005         	goto	l1223
   506   000BA0                     u400:
   507   000BA0  EF67  F005         	goto	l1203
   508   000BA4  EF02  F000         	goto	start
   509   000BA8                     __end_of_main:
   510                           	callstack 0
   511                           
   512 ;; *************** function _printf *****************
   513 ;; Defined at:
   514 ;;		line 477 in file "P:\Microchip\pic\sources\c90\common\doprnt.c"
   515 ;; Parameters:    Size  Location     Type
   516 ;;  f               2   22[COMRAM] PTR const unsigned char 
   517 ;;		 -> STR_5(15), STR_4(15), STR_3(15), STR_2(11), 
   518 ;;		 -> STR_1(20), 
   519 ;; Auto vars:     Size  Location     Type
   520 ;;  val             4   35[COMRAM] unsigned long 
   521 ;;  tmpval          4    0        struct .
   522 ;;  cp              3    0        PTR const unsigned char 
   523 ;;  ap              2   32[COMRAM] PTR void [1]
   524 ;;		 -> ?_printf(2), 
   525 ;;  prec            2   30[COMRAM] int 
   526 ;;  len             2    0        unsigned int 
   527 ;;  c               1   39[COMRAM] unsigned char 
   528 ;;  flag            1   34[COMRAM] unsigned char 
   529 ;; Return value:  Size  Location     Type
   530 ;;                  2   22[COMRAM] int 
   531 ;; Registers used:
   532 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   533 ;; Tracked objects:
   534 ;;		On entry : 0/0
   535 ;;		On exit  : 0/0
   536 ;;		Unchanged: 0/0
   537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   538 ;;      Params:         6       0       0       0       0       0       0       0       0
   539 ;;      Locals:        10       0       0       0       0       0       0       0       0
   540 ;;      Temps:          2       0       0       0       0       0       0       0       0
   541 ;;      Totals:        18       0       0       0       0       0       0       0       0
   542 ;;Total ram usage:       18 bytes
   543 ;; Hardware stack levels used: 1
   544 ;; Hardware stack levels required when called: 4
   545 ;; This function calls:
   546 ;;		___lldiv
   547 ;;		___llmod
   548 ;;		_putch
   549 ;; This function is called by:
   550 ;;		_main
   551 ;; This function uses a non-reentrant model
   552 ;;
   553                           
   554                           	psect	text1
   555   000876                     __ptext1:
   556                           	callstack 0
   557   000876                     _printf:
   558                           	callstack 26
   559   000876                     
   560                           ;P:\Microchip\pic\sources\c90\common\doprnt.c: 477: printf(const char * f, ...);P:\Micro
      +                          chip\pic\sources\c90\common\doprnt.c: 478: {;P:\Microchip\pic\sources\c90\common\doprnt.
      +                          c: 479:  va_list ap;;P:\Microchip\pic\sources\c90\common\doprnt.c: 512:  char c;;P:\Micr
      +                          ochip\pic\sources\c90\common\doprnt.c: 517:  int prec;;P:\Microchip\pic\sources\c90\comm
      +                          on\doprnt.c: 525:  unsigned char flag;;P:\Microchip\pic\sources\c90\common\doprnt.c: 543
      +                          :  } tmpval;;P:\Microchip\pic\sources\c90\common\doprnt.c: 545:  unsigned long val;
   561   000876  0E19               	movlw	low (?_printf+2)
   562   000878  6E21               	movwf	printf@ap^0,c
   563   00087A  0E00               	movlw	high (?_printf+2)
   564   00087C  6E22               	movwf	(printf@ap+1)^0,c
   565                           
   566                           ;P:\Microchip\pic\sources\c90\common\doprnt.c: 553:  while((c = *f++)) {
   567   00087E  EF3C  F005         	goto	l1187
   568   000882                     l1135:
   569                           
   570                           ;P:\Microchip\pic\sources\c90\common\doprnt.c: 555:   if(c != '%')
   571   000882  0E25               	movlw	37
   572   000884  1828               	xorwf	printf@c^0,w,c
   573   000886  B4D8               	btfsc	status,2,c
   574   000888  EF48  F004         	goto	u291
   575   00088C  EF4A  F004         	goto	u290
   576   000890                     u291:
   577   000890  EF4F  F004         	goto	l1139
   578   000894                     u290:
   579   000894                     
   580                           ;P:\Microchip\pic\sources\c90\common\doprnt.c: 557:   {;P:\Microchip\pic\sources\c90\com
      +                          mon\doprnt.c: 558:    (putch(c) );
   581   000894  5028               	movf	printf@c^0,w,c
   582   000896  EC1A  F007         	call	_putch
   583                           
   584                           ;P:\Microchip\pic\sources\c90\common\doprnt.c: 559:    continue;
   585   00089A  EF3C  F005         	goto	l1187
   586   00089E                     l1139:
   587                           
   588                           ;P:\Microchip\pic\sources\c90\common\doprnt.c: 565:   flag = 0;
   589   00089E  0E00               	movlw	0
   590   0008A0  6E23               	movwf	printf@flag^0,c
   591   0008A2  EF54  F004         	goto	l1145
   592   0008A6                     l1141:
   593                           
   594                           ;P:\Microchip\pic\sources\c90\common\doprnt.c: 669:    flag |= 0x10;
   595   0008A6  8823               	bsf	printf@flag^0,4,c
   596   0008A8                     l1145:
   597   0008A8  C017  FFF6         	movff	printf@f,tblptrl
   598   0008AC  C018  FFF7         	movff	printf@f+1,tblptrh
   599   0008B0  4A17               	infsnz	printf@f^0,f,c
   600   0008B2  2A18               	incf	(printf@f+1)^0,f,c
   601   0008B4                     	if	0	;tblptru may be non-zero
   602   0008B4                     	endif
   603   0008B4                     	if	0	;tblptru may be non-zero
   604   0008B4                     	endif
   605   0008B4  0008               	tblrd		*
   606   0008B6  CFF5 F028          	movff	tablat,printf@c
   607   0008BA  5028               	movf	printf@c^0,w,c
   608   0008BC  6E1D               	movwf	??_printf^0,c
   609   0008BE  6A1E               	clrf	(??_printf+1)^0,c
   610                           
   611                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   612                           ; Switch size 1, requested type "simple"
   613                           ; Number of cases is 1, Range of values is 0 to 0
   614                           ; switch strategies available:
   615                           ; Name         Instructions Cycles
   616                           ; simple_byte            4     3 (average)
   617                           ;	Chosen strategy is simple_byte
   618   0008C0  501E               	movf	(??_printf+1)^0,w,c
   619   0008C2  0A00               	xorlw	0	; case 0
   620   0008C4  B4D8               	btfsc	status,2,c
   621   0008C6  EF67  F004         	goto	l1261
   622   0008CA  EF3C  F005         	goto	l1187
   623   0008CE                     l1261:
   624                           
   625                           ; Switch size 1, requested type "simple"
   626                           ; Number of cases is 4, Range of values is 0 to 108
   627                           ; switch strategies available:
   628                           ; Name         Instructions Cycles
   629                           ; simple_byte           13     7 (average)
   630                           ;	Chosen strategy is simple_byte
   631   0008CE  501D               	movf	??_printf^0,w,c
   632   0008D0  0A00               	xorlw	0	; case 0
   633   0008D2  B4D8               	btfsc	status,2,c
   634   0008D4  EF4D  F005         	goto	l95
   635   0008D8  0A64               	xorlw	100	; case 100
   636   0008DA  B4D8               	btfsc	status,2,c
   637   0008DC  EF7A  F004         	goto	l82
   638   0008E0  0A0D               	xorlw	13	; case 105
   639   0008E2  B4D8               	btfsc	status,2,c
   640   0008E4  EF7A  F004         	goto	l82
   641   0008E8  0A05               	xorlw	5	; case 108
   642   0008EA  B4D8               	btfsc	status,2,c
   643   0008EC  EF53  F004         	goto	l1141
   644   0008F0  EF3C  F005         	goto	l1187
   645   0008F4                     l82:
   646                           
   647                           ;P:\Microchip\pic\sources\c90\common\doprnt.c: 1279:   {;P:\Microchip\pic\sources\c90\co
      +                          mmon\doprnt.c: 1281:    if(flag & 0x10)
   648   0008F4  A823               	btfss	printf@flag^0,4,c
   649   0008F6  EF7F  F004         	goto	u301
   650   0008FA  EF81  F004         	goto	u300
   651   0008FE                     u301:
   652   0008FE  EF93  F004         	goto	l1151
   653   000902                     u300:
   654   000902                     
   655                           ;P:\Microchip\pic\sources\c90\common\doprnt.c: 1282:     val = (unsigned long)(*(long *)
      +                          __va_arg((*(long **)ap), (long)0));
   656   000902  C021  FFD9         	movff	printf@ap,fsr2l
   657   000906  C022  FFDA         	movff	printf@ap+1,fsr2h
   658   00090A  CFDE F024          	movff	postinc2,printf@val
   659   00090E  CFDE F025          	movff	postinc2,printf@val+1
   660   000912  CFDE F026          	movff	postinc2,printf@val+2
   661   000916  CFDE F027          	movff	postinc2,printf@val+3
   662   00091A  0E04               	movlw	4
   663   00091C  2621               	addwf	printf@ap^0,f,c
   664   00091E  0E00               	movlw	0
   665   000920  2222               	addwfc	(printf@ap+1)^0,f,c
   666   000922  EFA4  F004         	goto	l1155
   667   000926                     l1151:
   668                           
   669                           ;P:\Microchip\pic\sources\c90\common\doprnt.c: 1285:     val = (unsigned long)(*(int *)_
      +                          _va_arg((*(int **)ap), (int)0));
   670   000926  C021  FFD9         	movff	printf@ap,fsr2l
   671   00092A  C022  FFDA         	movff	printf@ap+1,fsr2h
   672   00092E  CFDE F024          	movff	postinc2,printf@val
   673   000932  CFDD F025          	movff	postdec2,printf@val+1
   674   000936  0E00               	movlw	0
   675   000938  BE25               	btfsc	(printf@val+1)^0,7,c
   676   00093A  0EFF               	movlw	-1
   677   00093C  6E26               	movwf	(printf@val+2)^0,c
   678   00093E  6E27               	movwf	(printf@val+3)^0,c
   679   000940  0E02               	movlw	2
   680   000942  2621               	addwf	printf@ap^0,f,c
   681   000944  0E00               	movlw	0
   682   000946  2222               	addwfc	(printf@ap+1)^0,f,c
   683   000948                     l1155:
   684                           
   685                           ;P:\Microchip\pic\sources\c90\common\doprnt.c: 1287:    if((long)val < 0) {
   686   000948  BE27               	btfsc	(printf@val+3)^0,7,c
   687   00094A  EFAB  F004         	goto	u310
   688   00094E  EFA9  F004         	goto	u311
   689   000952                     u311:
   690   000952  EFB5  F004         	goto	l1161
   691   000956                     u310:
   692   000956                     
   693                           ;P:\Microchip\pic\sources\c90\common\doprnt.c: 1288:     flag |= 0x03;
   694   000956  0E03               	movlw	3
   695   000958  1223               	iorwf	printf@flag^0,f,c
   696   00095A                     
   697                           ;P:\Microchip\pic\sources\c90\common\doprnt.c: 1289:     val = -val;
   698   00095A  1E27               	comf	(printf@val+3)^0,f,c
   699   00095C  1E26               	comf	(printf@val+2)^0,f,c
   700   00095E  1E25               	comf	(printf@val+1)^0,f,c
   701   000960  6C24               	negf	printf@val^0,c
   702   000962  0E00               	movlw	0
   703   000964  2225               	addwfc	(printf@val+1)^0,f,c
   704   000966  2226               	addwfc	(printf@val+2)^0,f,c
   705   000968  2227               	addwfc	(printf@val+3)^0,f,c
   706   00096A                     l1161:
   707                           
   708                           ;P:\Microchip\pic\sources\c90\common\doprnt.c: 1292:   };P:\Microchip\pic\sources\c90\co
      +                          mmon\doprnt.c: 1331:    for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
   709   00096A  0E01               	movlw	1
   710   00096C  6E28               	movwf	printf@c^0,c
   711   00096E                     l1167:
   712                           
   713                           ;P:\Microchip\pic\sources\c90\common\doprnt.c: 1332:     if(val < dpowers[c])
   714   00096E  5028               	movf	printf@c^0,w,c
   715   000970  0D04               	mullw	4
   716   000972  0E01               	movlw	low _dpowers
   717   000974  24F3               	addwf	243,w,c
   718   000976  6EF6               	movwf	tblptrl,c
   719   000978  0E08               	movlw	high _dpowers
   720   00097A  20F4               	addwfc	244,w,c
   721   00097C  6EF7               	movwf	tblptrh,c
   722   00097E                     	if	0	;There are less than 3 active tblptr bytes
   723   00097E                     	endif
   724   00097E  0009               	tblrd		*+
   725   000980  50F5               	movf	tablat,w,c
   726   000982  5C24               	subwf	printf@val^0,w,c
   727   000984  0009               	tblrd		*+
   728   000986  50F5               	movf	tablat,w,c
   729   000988  5825               	subwfb	(printf@val+1)^0,w,c
   730   00098A  0009               	tblrd		*+
   731   00098C  50F5               	movf	tablat,w,c
   732   00098E  5826               	subwfb	(printf@val+2)^0,w,c
   733   000990  0009               	tblrd		*+
   734   000992  50F5               	movf	tablat,w,c
   735   000994  5827               	subwfb	(printf@val+3)^0,w,c
   736   000996  B0D8               	btfsc	status,0,c
   737   000998  EFD0  F004         	goto	u321
   738   00099C  EFD2  F004         	goto	u320
   739   0009A0                     u321:
   740   0009A0  EFD4  F004         	goto	l1171
   741   0009A4                     u320:
   742   0009A4  EFDE  F004         	goto	l1175
   743   0009A8                     l1171:
   744   0009A8  2A28               	incf	printf@c^0,f,c
   745   0009AA  0E0A               	movlw	10
   746   0009AC  1828               	xorwf	printf@c^0,w,c
   747   0009AE  A4D8               	btfss	status,2,c
   748   0009B0  EFDC  F004         	goto	u331
   749   0009B4  EFDE  F004         	goto	u330
   750   0009B8                     u331:
   751   0009B8  EFB7  F004         	goto	l1167
   752   0009BC                     u330:
   753   0009BC                     l1175:
   754                           
   755                           ;P:\Microchip\pic\sources\c90\common\doprnt.c: 1448:   {;P:\Microchip\pic\sources\c90\co
      +                          mmon\doprnt.c: 1464:    if(flag & 0x03)
   756   0009BC  C023  F01D         	movff	printf@flag,??_printf
   757   0009C0  0E03               	movlw	3
   758   0009C2  161D               	andwf	??_printf^0,f,c
   759   0009C4  B4D8               	btfsc	status,2,c
   760   0009C6  EFE7  F004         	goto	u341
   761   0009CA  EFE9  F004         	goto	u340
   762   0009CE                     u341:
   763   0009CE  EFEC  F004         	goto	l1179
   764   0009D2                     u340:
   765   0009D2                     
   766                           ;P:\Microchip\pic\sources\c90\common\doprnt.c: 1465:     (putch('-') );
   767   0009D2  0E2D               	movlw	45
   768   0009D4  EC1A  F007         	call	_putch
   769   0009D8                     l1179:
   770                           
   771                           ;P:\Microchip\pic\sources\c90\common\doprnt.c: 1495:   };P:\Microchip\pic\sources\c90\co
      +                          mmon\doprnt.c: 1498:   prec = c;
   772   0009D8  C028  F01F         	movff	printf@c,printf@prec
   773   0009DC  6A20               	clrf	(printf@prec+1)^0,c
   774                           
   775                           ;P:\Microchip\pic\sources\c90\common\doprnt.c: 1500:   while(prec--) {
   776   0009DE  EF2F  F005         	goto	l1185
   777   0009E2                     l1181:
   778                           
   779                           ;P:\Microchip\pic\sources\c90\common\doprnt.c: 1504:    {;P:\Microchip\pic\sources\c90\c
      +                          ommon\doprnt.c: 1515:     c = (val / dpowers[(unsigned int)prec]) % 10 + '0';
   780   0009E2  C01F  F01D         	movff	printf@prec,??_printf
   781   0009E6  C020  F01E         	movff	printf@prec+1,??_printf+1
   782   0009EA  90D8               	bcf	status,0,c
   783   0009EC  361D               	rlcf	??_printf^0,f,c
   784   0009EE  361E               	rlcf	(??_printf+1)^0,f,c
   785   0009F0  90D8               	bcf	status,0,c
   786   0009F2  361D               	rlcf	??_printf^0,f,c
   787   0009F4  361E               	rlcf	(??_printf+1)^0,f,c
   788   0009F6  0E01               	movlw	low _dpowers
   789   0009F8  241D               	addwf	??_printf^0,w,c
   790   0009FA  6EF6               	movwf	tblptrl,c
   791   0009FC  0E08               	movlw	high _dpowers
   792   0009FE  201E               	addwfc	(??_printf+1)^0,w,c
   793   000A00  6EF7               	movwf	tblptrh,c
   794   000A02                     	if	0	;There are less than 3 active tblptr bytes
   795   000A02                     	endif
   796   000A02  0009               	tblrd		*+
   797   000A04  CFF5 F005          	movff	tablat,___lldiv@divisor
   798   000A08  0009               	tblrd		*+
   799   000A0A  CFF5 F006          	movff	tablat,___lldiv@divisor+1
   800   000A0E  0009               	tblrd		*+
   801   000A10  CFF5 F007          	movff	tablat,___lldiv@divisor+2
   802   000A14  000A               	tblrd		*-
   803   000A16  CFF5 F008          	movff	tablat,___lldiv@divisor+3
   804   000A1A  C024  F001         	movff	printf@val,___lldiv@dividend
   805   000A1E  C025  F002         	movff	printf@val+1,___lldiv@dividend+1
   806   000A22  C026  F003         	movff	printf@val+2,___lldiv@dividend+2
   807   000A26  C027  F004         	movff	printf@val+3,___lldiv@dividend+3
   808   000A2A  ECD4  F005         	call	___lldiv	;wreg free
   809   000A2E  C001  F00E         	movff	?___lldiv,___llmod@dividend
   810   000A32  C002  F00F         	movff	?___lldiv+1,___llmod@dividend+1
   811   000A36  C003  F010         	movff	?___lldiv+2,___llmod@dividend+2
   812   000A3A  C004  F011         	movff	?___lldiv+3,___llmod@dividend+3
   813   000A3E  0E0A               	movlw	10
   814   000A40  6E12               	movwf	___llmod@divisor^0,c
   815   000A42  0E00               	movlw	0
   816   000A44  6E13               	movwf	(___llmod@divisor+1)^0,c
   817   000A46  0E00               	movlw	0
   818   000A48  6E14               	movwf	(___llmod@divisor+2)^0,c
   819   000A4A  0E00               	movlw	0
   820   000A4C  6E15               	movwf	(___llmod@divisor+3)^0,c
   821   000A4E  EC26  F006         	call	___llmod	;wreg free
   822   000A52  500E               	movf	?___llmod^0,w,c
   823   000A54  0F30               	addlw	48
   824   000A56  6E28               	movwf	printf@c^0,c
   825   000A58                     
   826                           ;P:\Microchip\pic\sources\c90\common\doprnt.c: 1549:    };P:\Microchip\pic\sources\c90\c
      +                          ommon\doprnt.c: 1550:    (putch(c) );
   827   000A58  5028               	movf	printf@c^0,w,c
   828   000A5A  EC1A  F007         	call	_putch
   829   000A5E                     l1185:
   830                           
   831                           ;P:\Microchip\pic\sources\c90\common\doprnt.c: 1500:   while(prec--) {
   832   000A5E  061F               	decf	printf@prec^0,f,c
   833   000A60  A0D8               	btfss	status,0,c
   834   000A62  0620               	decf	(printf@prec+1)^0,f,c
   835   000A64  281F               	incf	printf@prec^0,w,c
   836   000A66  E106               	bnz	u351
   837   000A68  2820               	incf	(printf@prec+1)^0,w,c
   838   000A6A  A4D8               	btfss	status,2,c
   839   000A6C  EF3A  F005         	goto	u351
   840   000A70  EF3C  F005         	goto	u350
   841   000A74                     u351:
   842   000A74  EFF1  F004         	goto	l1181
   843   000A78                     u350:
   844   000A78                     l1187:
   845                           
   846                           ;P:\Microchip\pic\sources\c90\common\doprnt.c: 553:  while((c = *f++)) {
   847   000A78  C017  FFF6         	movff	printf@f,tblptrl
   848   000A7C  C018  FFF7         	movff	printf@f+1,tblptrh
   849   000A80  4A17               	infsnz	printf@f^0,f,c
   850   000A82  2A18               	incf	(printf@f+1)^0,f,c
   851   000A84                     	if	0	;tblptru may be non-zero
   852   000A84                     	endif
   853   000A84                     	if	0	;tblptru may be non-zero
   854   000A84                     	endif
   855   000A84  0008               	tblrd		*
   856   000A86  CFF5 F028          	movff	tablat,printf@c
   857   000A8A  5028               	movf	printf@c^0,w,c
   858   000A8C  A4D8               	btfss	status,2,c
   859   000A8E  EF4B  F005         	goto	u361
   860   000A92  EF4D  F005         	goto	u360
   861   000A96                     u361:
   862   000A96  EF41  F004         	goto	l1135
   863   000A9A                     u360:
   864   000A9A                     l95:
   865   000A9A  0012               	return		;funcret
   866   000A9C                     __end_of_printf:
   867                           	callstack 0
   868                           
   869 ;; *************** function _putch *****************
   870 ;; Defined at:
   871 ;;		line 65 in file "main.c"
   872 ;; Parameters:    Size  Location     Type
   873 ;;  data            1    wreg     unsigned char 
   874 ;; Auto vars:     Size  Location     Type
   875 ;;  data            1    5[COMRAM] unsigned char 
   876 ;; Return value:  Size  Location     Type
   877 ;;                  1    wreg      void 
   878 ;; Registers used:
   879 ;;		wreg, status,2, status,0, cstack
   880 ;; Tracked objects:
   881 ;;		On entry : 0/0
   882 ;;		On exit  : 0/0
   883 ;;		Unchanged: 0/0
   884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   885 ;;      Params:         0       0       0       0       0       0       0       0       0
   886 ;;      Locals:         1       0       0       0       0       0       0       0       0
   887 ;;      Temps:          0       0       0       0       0       0       0       0       0
   888 ;;      Totals:         1       0       0       0       0       0       0       0       0
   889 ;;Total ram usage:        1 bytes
   890 ;; Hardware stack levels used: 1
   891 ;; Hardware stack levels required when called: 3
   892 ;; This function calls:
   893 ;;		_escreve_lcd
   894 ;; This function is called by:
   895 ;;		_printf
   896 ;; This function uses a non-reentrant model
   897 ;;
   898                           
   899                           	psect	text2
   900   000E34                     __ptext2:
   901                           	callstack 0
   902   000E34                     _putch:
   903                           	callstack 26
   904                           
   905                           ;incstack = 0
   906                           ;putch@data stored from wreg
   907   000E34  6E06               	movwf	putch@data^0,c
   908   000E36                     
   909                           ;main.c: 66:   escreve_lcd(data);
   910   000E36  5006               	movf	putch@data^0,w,c
   911   000E38  EC0E  F007         	call	_escreve_lcd
   912   000E3C  0012               	return		;funcret
   913   000E3E                     __end_of_putch:
   914                           	callstack 0
   915                           
   916 ;; *************** function _escreve_lcd *****************
   917 ;; Defined at:
   918 ;;		line 33 in file "lcd.c"
   919 ;; Parameters:    Size  Location     Type
   920 ;;  c               1    wreg     unsigned char 
   921 ;; Auto vars:     Size  Location     Type
   922 ;;  c               1    4[COMRAM] unsigned char 
   923 ;; Return value:  Size  Location     Type
   924 ;;                  1    wreg      void 
   925 ;; Registers used:
   926 ;;		wreg, status,2, status,0, cstack
   927 ;; Tracked objects:
   928 ;;		On entry : 0/0
   929 ;;		On exit  : 0/0
   930 ;;		Unchanged: 0/0
   931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   932 ;;      Params:         0       0       0       0       0       0       0       0       0
   933 ;;      Locals:         1       0       0       0       0       0       0       0       0
   934 ;;      Temps:          0       0       0       0       0       0       0       0       0
   935 ;;      Totals:         1       0       0       0       0       0       0       0       0
   936 ;;Total ram usage:        1 bytes
   937 ;; Hardware stack levels used: 1
   938 ;; Hardware stack levels required when called: 2
   939 ;; This function calls:
   940 ;;		_envia_byte_lcd
   941 ;; This function is called by:
   942 ;;		_putch
   943 ;; This function uses a non-reentrant model
   944 ;;
   945                           
   946                           	psect	text3
   947   000E1C                     __ptext3:
   948                           	callstack 0
   949   000E1C                     _escreve_lcd:
   950                           	callstack 26
   951                           
   952                           ;incstack = 0
   953                           ;escreve_lcd@c stored from wreg
   954   000E1C  6E05               	movwf	escreve_lcd@c^0,c
   955   000E1E  C005  F003         	movff	escreve_lcd@c,envia_byte_lcd@dado
   956   000E22  0E01               	movlw	1
   957   000E24  ECEF  F006         	call	_envia_byte_lcd
   958   000E28  0012               	return		;funcret
   959   000E2A                     __end_of_escreve_lcd:
   960                           	callstack 0
   961                           
   962 ;; *************** function ___llmod *****************
   963 ;; Defined at:
   964 ;;		line 7 in file "P:\Microchip\pic\sources\c90\common\llmod.c"
   965 ;; Parameters:    Size  Location     Type
   966 ;;  dividend        4   13[COMRAM] unsigned long 
   967 ;;  divisor         4   17[COMRAM] unsigned long 
   968 ;; Auto vars:     Size  Location     Type
   969 ;;  counter         1   21[COMRAM] unsigned char 
   970 ;; Return value:  Size  Location     Type
   971 ;;                  4   13[COMRAM] unsigned long 
   972 ;; Registers used:
   973 ;;		wreg, status,2, status,0
   974 ;; Tracked objects:
   975 ;;		On entry : 0/0
   976 ;;		On exit  : 0/0
   977 ;;		Unchanged: 0/0
   978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   979 ;;      Params:         8       0       0       0       0       0       0       0       0
   980 ;;      Locals:         1       0       0       0       0       0       0       0       0
   981 ;;      Temps:          0       0       0       0       0       0       0       0       0
   982 ;;      Totals:         9       0       0       0       0       0       0       0       0
   983 ;;Total ram usage:        9 bytes
   984 ;; Hardware stack levels used: 1
   985 ;; This function calls:
   986 ;;		Nothing
   987 ;; This function is called by:
   988 ;;		_printf
   989 ;; This function uses a non-reentrant model
   990 ;;
   991                           
   992                           	psect	text4
   993   000C4C                     __ptext4:
   994                           	callstack 0
   995   000C4C                     ___llmod:
   996                           	callstack 29
   997   000C4C  5012               	movf	___llmod@divisor^0,w,c
   998   000C4E  1013               	iorwf	(___llmod@divisor+1)^0,w,c
   999   000C50  1014               	iorwf	(___llmod@divisor+2)^0,w,c
  1000   000C52  1015               	iorwf	(___llmod@divisor+3)^0,w,c
  1001   000C54  B4D8               	btfsc	status,2,c
  1002   000C56  EF2F  F006         	goto	u261
  1003   000C5A  EF31  F006         	goto	u260
  1004   000C5E                     u261:
  1005   000C5E  EF61  F006         	goto	l506
  1006   000C62                     u260:
  1007   000C62  0E01               	movlw	1
  1008   000C64  6E16               	movwf	___llmod@counter^0,c
  1009   000C66  EF3B  F006         	goto	l1097
  1010   000C6A                     l1095:
  1011   000C6A  90D8               	bcf	status,0,c
  1012   000C6C  3612               	rlcf	___llmod@divisor^0,f,c
  1013   000C6E  3613               	rlcf	(___llmod@divisor+1)^0,f,c
  1014   000C70  3614               	rlcf	(___llmod@divisor+2)^0,f,c
  1015   000C72  3615               	rlcf	(___llmod@divisor+3)^0,f,c
  1016   000C74  2A16               	incf	___llmod@counter^0,f,c
  1017   000C76                     l1097:
  1018   000C76  AE15               	btfss	(___llmod@divisor+3)^0,7,c
  1019   000C78  EF40  F006         	goto	u271
  1020   000C7C  EF42  F006         	goto	u270
  1021   000C80                     u271:
  1022   000C80  EF35  F006         	goto	l1095
  1023   000C84                     u270:
  1024   000C84                     l1099:
  1025   000C84  5012               	movf	___llmod@divisor^0,w,c
  1026   000C86  5C0E               	subwf	___llmod@dividend^0,w,c
  1027   000C88  5013               	movf	(___llmod@divisor+1)^0,w,c
  1028   000C8A  580F               	subwfb	(___llmod@dividend+1)^0,w,c
  1029   000C8C  5014               	movf	(___llmod@divisor+2)^0,w,c
  1030   000C8E  5810               	subwfb	(___llmod@dividend+2)^0,w,c
  1031   000C90  5015               	movf	(___llmod@divisor+3)^0,w,c
  1032   000C92  5811               	subwfb	(___llmod@dividend+3)^0,w,c
  1033   000C94  A0D8               	btfss	status,0,c
  1034   000C96  EF4F  F006         	goto	u281
  1035   000C9A  EF51  F006         	goto	u280
  1036   000C9E                     u281:
  1037   000C9E  EF59  F006         	goto	l1103
  1038   000CA2                     u280:
  1039   000CA2  5012               	movf	___llmod@divisor^0,w,c
  1040   000CA4  5E0E               	subwf	___llmod@dividend^0,f,c
  1041   000CA6  5013               	movf	(___llmod@divisor+1)^0,w,c
  1042   000CA8  5A0F               	subwfb	(___llmod@dividend+1)^0,f,c
  1043   000CAA  5014               	movf	(___llmod@divisor+2)^0,w,c
  1044   000CAC  5A10               	subwfb	(___llmod@dividend+2)^0,f,c
  1045   000CAE  5015               	movf	(___llmod@divisor+3)^0,w,c
  1046   000CB0  5A11               	subwfb	(___llmod@dividend+3)^0,f,c
  1047   000CB2                     l1103:
  1048   000CB2  90D8               	bcf	status,0,c
  1049   000CB4  3215               	rrcf	(___llmod@divisor+3)^0,f,c
  1050   000CB6  3214               	rrcf	(___llmod@divisor+2)^0,f,c
  1051   000CB8  3213               	rrcf	(___llmod@divisor+1)^0,f,c
  1052   000CBA  3212               	rrcf	___llmod@divisor^0,f,c
  1053   000CBC  2E16               	decfsz	___llmod@counter^0,f,c
  1054   000CBE  EF42  F006         	goto	l1099
  1055   000CC2                     l506:
  1056   000CC2  C00E  F00E         	movff	___llmod@dividend,?___llmod
  1057   000CC6  C00F  F00F         	movff	___llmod@dividend+1,?___llmod+1
  1058   000CCA  C010  F010         	movff	___llmod@dividend+2,?___llmod+2
  1059   000CCE  C011  F011         	movff	___llmod@dividend+3,?___llmod+3
  1060   000CD2  0012               	return		;funcret
  1061   000CD4                     __end_of___llmod:
  1062                           	callstack 0
  1063                           
  1064 ;; *************** function ___lldiv *****************
  1065 ;; Defined at:
  1066 ;;		line 7 in file "P:\Microchip\pic\sources\c90\common\__lldiv.c"
  1067 ;; Parameters:    Size  Location     Type
  1068 ;;  dividend        4    0[COMRAM] unsigned long 
  1069 ;;  divisor         4    4[COMRAM] unsigned long 
  1070 ;; Auto vars:     Size  Location     Type
  1071 ;;  quotient        4    8[COMRAM] unsigned long 
  1072 ;;  counter         1   12[COMRAM] unsigned char 
  1073 ;; Return value:  Size  Location     Type
  1074 ;;                  4    0[COMRAM] unsigned long 
  1075 ;; Registers used:
  1076 ;;		wreg, status,2, status,0
  1077 ;; Tracked objects:
  1078 ;;		On entry : 0/0
  1079 ;;		On exit  : 0/0
  1080 ;;		Unchanged: 0/0
  1081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1082 ;;      Params:         8       0       0       0       0       0       0       0       0
  1083 ;;      Locals:         5       0       0       0       0       0       0       0       0
  1084 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1085 ;;      Totals:        13       0       0       0       0       0       0       0       0
  1086 ;;Total ram usage:       13 bytes
  1087 ;; Hardware stack levels used: 1
  1088 ;; This function calls:
  1089 ;;		Nothing
  1090 ;; This function is called by:
  1091 ;;		_printf
  1092 ;; This function uses a non-reentrant model
  1093 ;;
  1094                           
  1095                           	psect	text5
  1096   000BA8                     __ptext5:
  1097                           	callstack 0
  1098   000BA8                     ___lldiv:
  1099                           	callstack 29
  1100   000BA8  0E00               	movlw	0
  1101   000BAA  6E09               	movwf	___lldiv@quotient^0,c
  1102   000BAC  0E00               	movlw	0
  1103   000BAE  6E0A               	movwf	(___lldiv@quotient+1)^0,c
  1104   000BB0  0E00               	movlw	0
  1105   000BB2  6E0B               	movwf	(___lldiv@quotient+2)^0,c
  1106   000BB4  0E00               	movlw	0
  1107   000BB6  6E0C               	movwf	(___lldiv@quotient+3)^0,c
  1108   000BB8  5005               	movf	___lldiv@divisor^0,w,c
  1109   000BBA  1006               	iorwf	(___lldiv@divisor+1)^0,w,c
  1110   000BBC  1007               	iorwf	(___lldiv@divisor+2)^0,w,c
  1111   000BBE  1008               	iorwf	(___lldiv@divisor+3)^0,w,c
  1112   000BC0  B4D8               	btfsc	status,2,c
  1113   000BC2  EFE5  F005         	goto	u231
  1114   000BC6  EFE7  F005         	goto	u230
  1115   000BCA                     u231:
  1116   000BCA  EF1D  F006         	goto	l125
  1117   000BCE                     u230:
  1118   000BCE  0E01               	movlw	1
  1119   000BD0  6E0D               	movwf	___lldiv@counter^0,c
  1120   000BD2  EFF1  F005         	goto	l1077
  1121   000BD6                     l1075:
  1122   000BD6  90D8               	bcf	status,0,c
  1123   000BD8  3605               	rlcf	___lldiv@divisor^0,f,c
  1124   000BDA  3606               	rlcf	(___lldiv@divisor+1)^0,f,c
  1125   000BDC  3607               	rlcf	(___lldiv@divisor+2)^0,f,c
  1126   000BDE  3608               	rlcf	(___lldiv@divisor+3)^0,f,c
  1127   000BE0  2A0D               	incf	___lldiv@counter^0,f,c
  1128   000BE2                     l1077:
  1129   000BE2  AE08               	btfss	(___lldiv@divisor+3)^0,7,c
  1130   000BE4  EFF6  F005         	goto	u241
  1131   000BE8  EFF8  F005         	goto	u240
  1132   000BEC                     u241:
  1133   000BEC  EFEB  F005         	goto	l1075
  1134   000BF0                     u240:
  1135   000BF0                     l1079:
  1136   000BF0  90D8               	bcf	status,0,c
  1137   000BF2  3609               	rlcf	___lldiv@quotient^0,f,c
  1138   000BF4  360A               	rlcf	(___lldiv@quotient+1)^0,f,c
  1139   000BF6  360B               	rlcf	(___lldiv@quotient+2)^0,f,c
  1140   000BF8  360C               	rlcf	(___lldiv@quotient+3)^0,f,c
  1141   000BFA  5005               	movf	___lldiv@divisor^0,w,c
  1142   000BFC  5C01               	subwf	___lldiv@dividend^0,w,c
  1143   000BFE  5006               	movf	(___lldiv@divisor+1)^0,w,c
  1144   000C00  5802               	subwfb	(___lldiv@dividend+1)^0,w,c
  1145   000C02  5007               	movf	(___lldiv@divisor+2)^0,w,c
  1146   000C04  5803               	subwfb	(___lldiv@dividend+2)^0,w,c
  1147   000C06  5008               	movf	(___lldiv@divisor+3)^0,w,c
  1148   000C08  5804               	subwfb	(___lldiv@dividend+3)^0,w,c
  1149   000C0A  A0D8               	btfss	status,0,c
  1150   000C0C  EF0A  F006         	goto	u251
  1151   000C10  EF0C  F006         	goto	u250
  1152   000C14                     u251:
  1153   000C14  EF15  F006         	goto	l1087
  1154   000C18                     u250:
  1155   000C18  5005               	movf	___lldiv@divisor^0,w,c
  1156   000C1A  5E01               	subwf	___lldiv@dividend^0,f,c
  1157   000C1C  5006               	movf	(___lldiv@divisor+1)^0,w,c
  1158   000C1E  5A02               	subwfb	(___lldiv@dividend+1)^0,f,c
  1159   000C20  5007               	movf	(___lldiv@divisor+2)^0,w,c
  1160   000C22  5A03               	subwfb	(___lldiv@dividend+2)^0,f,c
  1161   000C24  5008               	movf	(___lldiv@divisor+3)^0,w,c
  1162   000C26  5A04               	subwfb	(___lldiv@dividend+3)^0,f,c
  1163   000C28  8009               	bsf	___lldiv@quotient^0,0,c
  1164   000C2A                     l1087:
  1165   000C2A  90D8               	bcf	status,0,c
  1166   000C2C  3208               	rrcf	(___lldiv@divisor+3)^0,f,c
  1167   000C2E  3207               	rrcf	(___lldiv@divisor+2)^0,f,c
  1168   000C30  3206               	rrcf	(___lldiv@divisor+1)^0,f,c
  1169   000C32  3205               	rrcf	___lldiv@divisor^0,f,c
  1170   000C34  2E0D               	decfsz	___lldiv@counter^0,f,c
  1171   000C36  EFF8  F005         	goto	l1079
  1172   000C3A                     l125:
  1173   000C3A  C009  F001         	movff	___lldiv@quotient,?___lldiv
  1174   000C3E  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  1175   000C42  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  1176   000C46  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  1177   000C4A  0012               	return		;funcret
  1178   000C4C                     __end_of___lldiv:
  1179                           	callstack 0
  1180                           
  1181 ;; *************** function _limpa_lcd *****************
  1182 ;; Defined at:
  1183 ;;		line 36 in file "lcd.c"
  1184 ;; Parameters:    Size  Location     Type
  1185 ;;		None
  1186 ;; Auto vars:     Size  Location     Type
  1187 ;;		None
  1188 ;; Return value:  Size  Location     Type
  1189 ;;                  1    wreg      void 
  1190 ;; Registers used:
  1191 ;;		wreg, status,2, status,0, cstack
  1192 ;; Tracked objects:
  1193 ;;		On entry : 0/0
  1194 ;;		On exit  : 0/0
  1195 ;;		Unchanged: 0/0
  1196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1197 ;;      Params:         0       0       0       0       0       0       0       0       0
  1198 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1199 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1200 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1201 ;;Total ram usage:        1 bytes
  1202 ;; Hardware stack levels used: 1
  1203 ;; Hardware stack levels required when called: 2
  1204 ;; This function calls:
  1205 ;;		_envia_byte_lcd
  1206 ;; This function is called by:
  1207 ;;		_main
  1208 ;; This function uses a non-reentrant model
  1209 ;;
  1210                           
  1211                           	psect	text6
  1212   000E02                     __ptext6:
  1213                           	callstack 0
  1214   000E02                     _limpa_lcd:
  1215                           	callstack 28
  1216   000E02                     
  1217                           ;lcd.c: 38:   envia_byte_lcd(0,0x01);
  1218   000E02  0E01               	movlw	1
  1219   000E04  6E03               	movwf	envia_byte_lcd@dado^0,c
  1220   000E06  0E00               	movlw	0
  1221   000E08  ECEF  F006         	call	_envia_byte_lcd
  1222   000E0C                     
  1223                           ;lcd.c: 39:   _delay((unsigned long)((2)*(4000000/4000.0)));
  1224   000E0C  0E03               	movlw	3
  1225   000E0E  6E05               	movwf	??_limpa_lcd^0,c
  1226   000E10  0E98               	movlw	152
  1227   000E12                     u447:
  1228   000E12  2EE8               	decfsz	wreg,f,c
  1229   000E14  D7FE               	bra	u447
  1230   000E16  2E05               	decfsz	??_limpa_lcd^0,f,c
  1231   000E18  D7FC               	bra	u447
  1232   000E1A  0012               	return		;funcret
  1233   000E1C                     __end_of_limpa_lcd:
  1234                           	callstack 0
  1235                           
  1236 ;; *************** function _inicializa_lcd *****************
  1237 ;; Defined at:
  1238 ;;		line 43 in file "lcd.c"
  1239 ;; Parameters:    Size  Location     Type
  1240 ;;		None
  1241 ;; Auto vars:     Size  Location     Type
  1242 ;;		None
  1243 ;; Return value:  Size  Location     Type
  1244 ;;                  1    wreg      void 
  1245 ;; Registers used:
  1246 ;;		wreg, status,2, status,0, cstack
  1247 ;; Tracked objects:
  1248 ;;		On entry : 0/0
  1249 ;;		On exit  : 0/0
  1250 ;;		Unchanged: 0/0
  1251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1252 ;;      Params:         0       0       0       0       0       0       0       0       0
  1253 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1254 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1255 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1256 ;;Total ram usage:        1 bytes
  1257 ;; Hardware stack levels used: 1
  1258 ;; Hardware stack levels required when called: 2
  1259 ;; This function calls:
  1260 ;;		_envia_byte_lcd
  1261 ;;		_envia_nibble_lcd
  1262 ;; This function is called by:
  1263 ;;		_main
  1264 ;; This function uses a non-reentrant model
  1265 ;;
  1266                           
  1267                           	psect	text7
  1268   000D5C                     __ptext7:
  1269                           	callstack 0
  1270   000D5C                     _inicializa_lcd:
  1271                           	callstack 28
  1272   000D5C                     
  1273                           ;lcd.c: 45:  PORTDbits.RD1 = 0;
  1274   000D5C  9283               	bcf	131,1,c	;volatile
  1275                           
  1276                           ;lcd.c: 46:  PORTDbits.RD4 = 0;
  1277   000D5E  9883               	bcf	131,4,c	;volatile
  1278                           
  1279                           ;lcd.c: 47:  PORTDbits.RD5 = 0;
  1280   000D60  9A83               	bcf	131,5,c	;volatile
  1281                           
  1282                           ;lcd.c: 48:  PORTDbits.RD6 = 0;
  1283   000D62  9C83               	bcf	131,6,c	;volatile
  1284                           
  1285                           ;lcd.c: 49:  PORTDbits.RD7 = 0;
  1286   000D64  9E83               	bcf	131,7,c	;volatile
  1287   000D66                     
  1288                           ;lcd.c: 51:  _delay((unsigned long)((50)*(4000000/4000.0)));
  1289   000D66  0E41               	movlw	65
  1290   000D68  6E05               	movwf	??_inicializa_lcd^0,c
  1291   000D6A  0EEE               	movlw	238
  1292   000D6C                     u457:
  1293   000D6C  2EE8               	decfsz	wreg,f,c
  1294   000D6E  D7FE               	bra	u457
  1295   000D70  2E05               	decfsz	??_inicializa_lcd^0,f,c
  1296   000D72  D7FC               	bra	u457
  1297   000D74  D000               	nop2	
  1298   000D76                     
  1299                           ;lcd.c: 52:  envia_nibble_lcd(0x03);
  1300   000D76  0E03               	movlw	3
  1301   000D78  EC6A  F006         	call	_envia_nibble_lcd
  1302   000D7C                     
  1303                           ;lcd.c: 53:  _delay((unsigned long)((4)*(4000000/4000.0)));
  1304   000D7C  0E06               	movlw	6
  1305   000D7E  6E05               	movwf	??_inicializa_lcd^0,c
  1306   000D80  0E30               	movlw	48
  1307   000D82                     u467:
  1308   000D82  2EE8               	decfsz	wreg,f,c
  1309   000D84  D7FE               	bra	u467
  1310   000D86  2E05               	decfsz	??_inicializa_lcd^0,f,c
  1311   000D88  D7FC               	bra	u467
  1312   000D8A  D000               	nop2	
  1313                           
  1314                           ;lcd.c: 54:  envia_nibble_lcd(0x03);
  1315   000D8C  0E03               	movlw	3
  1316   000D8E  EC6A  F006         	call	_envia_nibble_lcd
  1317   000D92                     
  1318                           ;lcd.c: 55:  _delay((unsigned long)((100)*(4000000/4000000.0)));
  1319   000D92  0E21               	movlw	33
  1320   000D94                     u477:
  1321   000D94  2EE8               	decfsz	wreg,f,c
  1322   000D96  D7FE               	bra	u477
  1323   000D98  F000               	nop	
  1324   000D9A                     
  1325                           ;lcd.c: 56:  envia_nibble_lcd(0x03);
  1326   000D9A  0E03               	movlw	3
  1327   000D9C  EC6A  F006         	call	_envia_nibble_lcd
  1328   000DA0                     
  1329                           ;lcd.c: 58:  envia_nibble_lcd(0x02);
  1330   000DA0  0E02               	movlw	2
  1331   000DA2  EC6A  F006         	call	_envia_nibble_lcd
  1332   000DA6                     
  1333                           ;lcd.c: 60:  envia_byte_lcd(0,0x01);
  1334   000DA6  0E01               	movlw	1
  1335   000DA8  6E03               	movwf	envia_byte_lcd@dado^0,c
  1336   000DAA  0E00               	movlw	0
  1337   000DAC  ECEF  F006         	call	_envia_byte_lcd
  1338                           
  1339                           ;lcd.c: 61:  _delay((unsigned long)((2)*(4000000/4000.0)));
  1340   000DB0  0E03               	movlw	3
  1341   000DB2  6E05               	movwf	??_inicializa_lcd^0,c
  1342   000DB4  0E98               	movlw	152
  1343   000DB6                     u487:
  1344   000DB6  2EE8               	decfsz	wreg,f,c
  1345   000DB8  D7FE               	bra	u487
  1346   000DBA  2E05               	decfsz	??_inicializa_lcd^0,f,c
  1347   000DBC  D7FC               	bra	u487
  1348   000DBE                     
  1349                           ;lcd.c: 63:  envia_byte_lcd(0,0x28);
  1350   000DBE  0E28               	movlw	40
  1351   000DC0  6E03               	movwf	envia_byte_lcd@dado^0,c
  1352   000DC2  0E00               	movlw	0
  1353   000DC4  ECEF  F006         	call	_envia_byte_lcd
  1354   000DC8                     
  1355                           ;lcd.c: 65:  envia_byte_lcd(0,0x0c);
  1356   000DC8  0E0C               	movlw	12
  1357   000DCA  6E03               	movwf	envia_byte_lcd@dado^0,c
  1358   000DCC  0E00               	movlw	0
  1359   000DCE  ECEF  F006         	call	_envia_byte_lcd
  1360   000DD2                     
  1361                           ;lcd.c: 67:  envia_byte_lcd(0,0x06);
  1362   000DD2  0E06               	movlw	6
  1363   000DD4  6E03               	movwf	envia_byte_lcd@dado^0,c
  1364   000DD6  0E00               	movlw	0
  1365   000DD8  ECEF  F006         	call	_envia_byte_lcd
  1366   000DDC  0012               	return		;funcret
  1367   000DDE                     __end_of_inicializa_lcd:
  1368                           	callstack 0
  1369                           
  1370 ;; *************** function _envia_byte_lcd *****************
  1371 ;; Defined at:
  1372 ;;		line 22 in file "lcd.c"
  1373 ;; Parameters:    Size  Location     Type
  1374 ;;  endereco        1    wreg     unsigned char 
  1375 ;;  dado            1    2[COMRAM] unsigned char 
  1376 ;; Auto vars:     Size  Location     Type
  1377 ;;  endereco        1    3[COMRAM] unsigned char 
  1378 ;; Return value:  Size  Location     Type
  1379 ;;                  1    wreg      void 
  1380 ;; Registers used:
  1381 ;;		wreg, status,2, status,0, cstack
  1382 ;; Tracked objects:
  1383 ;;		On entry : 0/0
  1384 ;;		On exit  : 0/0
  1385 ;;		Unchanged: 0/0
  1386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1387 ;;      Params:         1       0       0       0       0       0       0       0       0
  1388 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1389 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1390 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1391 ;;Total ram usage:        2 bytes
  1392 ;; Hardware stack levels used: 1
  1393 ;; Hardware stack levels required when called: 1
  1394 ;; This function calls:
  1395 ;;		_envia_nibble_lcd
  1396 ;; This function is called by:
  1397 ;;		_escreve_lcd
  1398 ;;		_limpa_lcd
  1399 ;;		_inicializa_lcd
  1400 ;;		_caracter_inicio
  1401 ;; This function uses a non-reentrant model
  1402 ;;
  1403                           
  1404                           	psect	text8
  1405   000DDE                     __ptext8:
  1406                           	callstack 0
  1407   000DDE                     _envia_byte_lcd:
  1408                           	callstack 26
  1409                           
  1410                           ;incstack = 0
  1411                           ;envia_byte_lcd@endereco stored from wreg
  1412   000DDE  6E04               	movwf	envia_byte_lcd@endereco^0,c
  1413   000DE0                     
  1414                           ;lcd.c: 22: void envia_byte_lcd(char endereco,char dado);lcd.c: 23: {;lcd.c: 24:  PORTDb
      +                          its.RD0 = endereco;
  1415   000DE0  B004               	btfsc	envia_byte_lcd@endereco^0,0,c
  1416   000DE2  D002               	bra	u225
  1417   000DE4  9083               	bcf	131,0,c	;volatile
  1418   000DE6  D001               	bra	u226
  1419   000DE8                     u225:
  1420   000DE8  8083               	bsf	131,0,c	;volatile
  1421   000DEA                     u226:
  1422   000DEA                     
  1423                           ;lcd.c: 25:  _delay((unsigned long)((5)*(4000000/4000000.0)));
  1424   000DEA  D000               	nop2		;2 cycle nop
  1425   000DEC  D000               	nop2		;2 cycle nop
  1426   000DEE  F000               	nop	
  1427   000DF0                     
  1428                           ;lcd.c: 26:  envia_nibble_lcd(dado>>4);
  1429   000DF0  3803               	swapf	envia_byte_lcd@dado^0,w,c
  1430   000DF2  0B0F               	andlw	15
  1431   000DF4  EC6A  F006         	call	_envia_nibble_lcd
  1432   000DF8                     
  1433                           ;lcd.c: 27:  envia_nibble_lcd(dado & 0x0f);
  1434   000DF8  5003               	movf	envia_byte_lcd@dado^0,w,c
  1435   000DFA  0B0F               	andlw	15
  1436   000DFC  EC6A  F006         	call	_envia_nibble_lcd
  1437   000E00  0012               	return		;funcret
  1438   000E02                     __end_of_envia_byte_lcd:
  1439                           	callstack 0
  1440                           
  1441 ;; *************** function _envia_nibble_lcd *****************
  1442 ;; Defined at:
  1443 ;;		line 4 in file "lcd.c"
  1444 ;; Parameters:    Size  Location     Type
  1445 ;;  dado            1    wreg     unsigned char 
  1446 ;; Auto vars:     Size  Location     Type
  1447 ;;  dado            1    1[COMRAM] unsigned char 
  1448 ;; Return value:  Size  Location     Type
  1449 ;;                  1    wreg      void 
  1450 ;; Registers used:
  1451 ;;		wreg, status,2, status,0
  1452 ;; Tracked objects:
  1453 ;;		On entry : 0/0
  1454 ;;		On exit  : 0/0
  1455 ;;		Unchanged: 0/0
  1456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1457 ;;      Params:         0       0       0       0       0       0       0       0       0
  1458 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1459 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1460 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1461 ;;Total ram usage:        2 bytes
  1462 ;; Hardware stack levels used: 1
  1463 ;; This function calls:
  1464 ;;		Nothing
  1465 ;; This function is called by:
  1466 ;;		_envia_byte_lcd
  1467 ;;		_inicializa_lcd
  1468 ;; This function uses a non-reentrant model
  1469 ;;
  1470                           
  1471                           	psect	text9
  1472   000CD4                     __ptext9:
  1473                           	callstack 0
  1474   000CD4                     _envia_nibble_lcd:
  1475                           	callstack 26
  1476                           
  1477                           ;incstack = 0
  1478                           ;envia_nibble_lcd@dado stored from wreg
  1479   000CD4  6E02               	movwf	envia_nibble_lcd@dado^0,c
  1480   000CD6                     
  1481                           ;lcd.c: 4: void envia_nibble_lcd(char dado);lcd.c: 5: {;lcd.c: 6:   PORTDbits.RD1 = 1;
  1482   000CD6  8283               	bsf	131,1,c	;volatile
  1483   000CD8                     
  1484                           ;lcd.c: 7:   PORTDbits.RD4 = dado & 0x01;
  1485   000CD8  C002  F001         	movff	envia_nibble_lcd@dado,??_envia_nibble_lcd
  1486   000CDC  0E01               	movlw	1
  1487   000CDE  1601               	andwf	??_envia_nibble_lcd^0,f,c
  1488   000CE0  3A01               	swapf	??_envia_nibble_lcd^0,f,c
  1489   000CE2  5083               	movf	131,w,c	;volatile
  1490   000CE4  1801               	xorwf	??_envia_nibble_lcd^0,w,c
  1491   000CE6  0BEF               	andlw	-17
  1492   000CE8  1801               	xorwf	??_envia_nibble_lcd^0,w,c
  1493   000CEA  6E83               	movwf	131,c	;volatile
  1494                           
  1495                           ;lcd.c: 8:   PORTDbits.RD5 = (dado >> 1) & 0x01;
  1496   000CEC  C002  F001         	movff	envia_nibble_lcd@dado,??_envia_nibble_lcd
  1497   000CF0  90D8               	bcf	status,0,c
  1498   000CF2  3201               	rrcf	??_envia_nibble_lcd^0,f,c
  1499   000CF4  0E01               	movlw	1
  1500   000CF6  1601               	andwf	??_envia_nibble_lcd^0,f,c
  1501   000CF8  3A01               	swapf	??_envia_nibble_lcd^0,f,c
  1502   000CFA  4601               	rlncf	??_envia_nibble_lcd^0,f,c
  1503   000CFC  5083               	movf	131,w,c	;volatile
  1504   000CFE  1801               	xorwf	??_envia_nibble_lcd^0,w,c
  1505   000D00  0BDF               	andlw	-33
  1506   000D02  1801               	xorwf	??_envia_nibble_lcd^0,w,c
  1507   000D04  6E83               	movwf	131,c	;volatile
  1508                           
  1509                           ;lcd.c: 9:   PORTDbits.RD6 = (dado >> 2) & 0x01;
  1510   000D06  C002  F001         	movff	envia_nibble_lcd@dado,??_envia_nibble_lcd
  1511   000D0A  90D8               	bcf	status,0,c
  1512   000D0C  3201               	rrcf	??_envia_nibble_lcd^0,f,c
  1513   000D0E  90D8               	bcf	status,0,c
  1514   000D10  3201               	rrcf	??_envia_nibble_lcd^0,f,c
  1515   000D12  0E01               	movlw	1
  1516   000D14  1601               	andwf	??_envia_nibble_lcd^0,f,c
  1517   000D16  3A01               	swapf	??_envia_nibble_lcd^0,f,c
  1518   000D18  4601               	rlncf	??_envia_nibble_lcd^0,f,c
  1519   000D1A  4601               	rlncf	??_envia_nibble_lcd^0,f,c
  1520   000D1C  5083               	movf	131,w,c	;volatile
  1521   000D1E  1801               	xorwf	??_envia_nibble_lcd^0,w,c
  1522   000D20  0BBF               	andlw	-65
  1523   000D22  1801               	xorwf	??_envia_nibble_lcd^0,w,c
  1524   000D24  6E83               	movwf	131,c	;volatile
  1525                           
  1526                           ;lcd.c: 10:   PORTDbits.RD7 = (dado >> 3) & 0x01;
  1527   000D26  C002  F001         	movff	envia_nibble_lcd@dado,??_envia_nibble_lcd
  1528   000D2A  90D8               	bcf	status,0,c
  1529   000D2C  3201               	rrcf	??_envia_nibble_lcd^0,f,c
  1530   000D2E  90D8               	bcf	status,0,c
  1531   000D30  3201               	rrcf	??_envia_nibble_lcd^0,f,c
  1532   000D32  90D8               	bcf	status,0,c
  1533   000D34  3201               	rrcf	??_envia_nibble_lcd^0,f,c
  1534   000D36  0E01               	movlw	1
  1535   000D38  1601               	andwf	??_envia_nibble_lcd^0,f,c
  1536   000D3A  3201               	rrcf	??_envia_nibble_lcd^0,f,c
  1537   000D3C  3201               	rrcf	??_envia_nibble_lcd^0,f,c
  1538   000D3E  5083               	movf	131,w,c	;volatile
  1539   000D40  1801               	xorwf	??_envia_nibble_lcd^0,w,c
  1540   000D42  0B7F               	andlw	-129
  1541   000D44  1801               	xorwf	??_envia_nibble_lcd^0,w,c
  1542   000D46  6E83               	movwf	131,c	;volatile
  1543   000D48                     
  1544                           ;lcd.c: 13:   _delay((unsigned long)((50)*(4000000/4000000.0)));
  1545   000D48  0E10               	movlw	16
  1546   000D4A                     u497:
  1547   000D4A  2EE8               	decfsz	wreg,f,c
  1548   000D4C  D7FE               	bra	u497
  1549   000D4E  D000               	nop2	
  1550   000D50                     
  1551                           ;lcd.c: 14:   PORTDbits.RD1 = 0;
  1552   000D50  9283               	bcf	131,1,c	;volatile
  1553   000D52                     
  1554                           ;lcd.c: 15:   _delay((unsigned long)((50)*(4000000/4000000.0)));
  1555   000D52  0E10               	movlw	16
  1556   000D54                     u507:
  1557   000D54  2EE8               	decfsz	wreg,f,c
  1558   000D56  D7FE               	bra	u507
  1559   000D58  D000               	nop2	
  1560   000D5A  0012               	return		;funcret
  1561   000D5C                     __end_of_envia_nibble_lcd:
  1562                           	callstack 0
  1563                           
  1564                           	psect	rparam
  1565   000000                     
  1566                           	psect	config
  1567                           
  1568                           ;Config register CONFIG1L @ 0x300000
  1569                           ;	unspecified, using default values
  1570                           ;	PLL Prescaler Selection bits
  1571                           ;	PLLDIV = 0x0, unprogrammed default
  1572                           ;	System Clock Postscaler Selection bits
  1573                           ;	CPUDIV = 0x0, unprogrammed default
  1574                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
  1575                           ;	USBDIV = 0x0, unprogrammed default
  1576   300000                     	org	3145728
  1577   300000  00                 	db	0
  1578                           
  1579                           ;Config register CONFIG1H @ 0x300001
  1580                           ;	Oscillator Selection bits
  1581                           ;	FOSC = XT_XT, XT oscillator (XT)
  1582                           ;	Fail-Safe Clock Monitor Enable bit
  1583                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  1584                           ;	Internal/External Oscillator Switchover bit
  1585                           ;	IESO = OFF, Oscillator Switchover mode disabled
  1586   300001                     	org	3145729
  1587   300001  00                 	db	0
  1588                           
  1589                           ;Config register CONFIG2L @ 0x300002
  1590                           ;	Power-up Timer Enable bit
  1591                           ;	PWRT = OFF, PWRT disabled
  1592                           ;	Brown-out Reset Enable bits
  1593                           ;	BOR = ON, Brown-out Reset enabled in hardware only (SBOREN is disabled)
  1594                           ;	Brown-out Reset Voltage bits
  1595                           ;	BORV = 3, Minimum setting 2.05V
  1596                           ;	USB Voltage Regulator Enable bit
  1597                           ;	VREGEN = OFF, USB voltage regulator disabled
  1598   300002                     	org	3145730
  1599   300002  1F                 	db	31
  1600                           
  1601                           ;Config register CONFIG2H @ 0x300003
  1602                           ;	Watchdog Timer Enable bit
  1603                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  1604                           ;	Watchdog Timer Postscale Select bits
  1605                           ;	WDTPS = 32768, 1:32768
  1606   300003                     	org	3145731
  1607   300003  1E                 	db	30
  1608                           
  1609                           ; Padding undefined space
  1610   300004                     	org	3145732
  1611   300004  FF                 	db	255
  1612                           
  1613                           ;Config register CONFIG3H @ 0x300005
  1614                           ;	CCP2 MUX bit
  1615                           ;	CCP2MX = ON, CCP2 input/output is multiplexed with RC1
  1616                           ;	PORTB A/D Enable bit
  1617                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  1618                           ;	Low-Power Timer 1 Oscillator Enable bit
  1619                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  1620                           ;	MCLR Pin Enable bit
  1621                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  1622   300005                     	org	3145733
  1623   300005  81                 	db	129
  1624                           
  1625                           ;Config register CONFIG4L @ 0x300006
  1626                           ;	Stack Full/Underflow Reset Enable bit
  1627                           ;	STVREN = ON, Stack full/underflow will cause Reset
  1628                           ;	Single-Supply ICSP Enable bit
  1629                           ;	LVP = OFF, Single-Supply ICSP disabled
  1630                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
  1631                           ;	ICPRT = OFF, ICPORT disabled
  1632                           ;	Extended Instruction Set Enable bit
  1633                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  1634                           ;	Background Debugger Enable bit
  1635                           ;	DEBUG = 0x1, unprogrammed default
  1636   300006                     	org	3145734
  1637   300006  81                 	db	129
  1638                           
  1639                           ; Padding undefined space
  1640   300007                     	org	3145735
  1641   300007  FF                 	db	255
  1642                           
  1643                           ;Config register CONFIG5L @ 0x300008
  1644                           ;	Code Protection bit
  1645                           ;	CP0 = OFF, Block 0 (000800-001FFFh) is not code-protected
  1646                           ;	Code Protection bit
  1647                           ;	CP1 = OFF, Block 1 (002000-003FFFh) is not code-protected
  1648                           ;	Code Protection bit
  1649                           ;	CP2 = OFF, Block 2 (004000-005FFFh) is not code-protected
  1650                           ;	Code Protection bit
  1651                           ;	CP3 = OFF, Block 3 (006000-007FFFh) is not code-protected
  1652   300008                     	org	3145736
  1653   300008  0F                 	db	15
  1654                           
  1655                           ;Config register CONFIG5H @ 0x300009
  1656                           ;	Boot Block Code Protection bit
  1657                           ;	CPB = OFF, Boot block (000000-0007FFh) is not code-protected
  1658                           ;	Data EEPROM Code Protection bit
  1659                           ;	CPD = OFF, Data EEPROM is not code-protected
  1660   300009                     	org	3145737
  1661   300009  C0                 	db	192
  1662                           
  1663                           ;Config register CONFIG6L @ 0x30000A
  1664                           ;	Write Protection bit
  1665                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) is not write-protected
  1666                           ;	Write Protection bit
  1667                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) is not write-protected
  1668                           ;	Write Protection bit
  1669                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) is not write-protected
  1670                           ;	Write Protection bit
  1671                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) is not write-protected
  1672   30000A                     	org	3145738
  1673   30000A  0F                 	db	15
  1674                           
  1675                           ;Config register CONFIG6H @ 0x30000B
  1676                           ;	Configuration Register Write Protection bit
  1677                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
  1678                           ;	Boot Block Write Protection bit
  1679                           ;	WRTB = OFF, Boot block (000000-0007FFh) is not write-protected
  1680                           ;	Data EEPROM Write Protection bit
  1681                           ;	WRTD = OFF, Data EEPROM is not write-protected
  1682   30000B                     	org	3145739
  1683   30000B  E0                 	db	224
  1684                           
  1685                           ;Config register CONFIG7L @ 0x30000C
  1686                           ;	Table Read Protection bit
  1687                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1688                           ;	Table Read Protection bit
  1689                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1690                           ;	Table Read Protection bit
  1691                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1692                           ;	Table Read Protection bit
  1693                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1694   30000C                     	org	3145740
  1695   30000C  0F                 	db	15
  1696                           
  1697                           ;Config register CONFIG7H @ 0x30000D
  1698                           ;	Boot Block Table Read Protection bit
  1699                           ;	EBTRB = OFF, Boot block (000000-0007FFh) is not protected from table reads executed in
      +                           other blocks
  1700   30000D                     	org	3145741
  1701   30000D  40                 	db	64
  1702                           tosu	equ	0xFFF
  1703                           tosh	equ	0xFFE
  1704                           tosl	equ	0xFFD
  1705                           stkptr	equ	0xFFC
  1706                           pclatu	equ	0xFFB
  1707                           pclath	equ	0xFFA
  1708                           pcl	equ	0xFF9
  1709                           tblptru	equ	0xFF8
  1710                           tblptrh	equ	0xFF7
  1711                           tblptrl	equ	0xFF6
  1712                           tablat	equ	0xFF5
  1713                           prodh	equ	0xFF4
  1714                           prodl	equ	0xFF3
  1715                           indf0	equ	0xFEF
  1716                           postinc0	equ	0xFEE
  1717                           postdec0	equ	0xFED
  1718                           preinc0	equ	0xFEC
  1719                           plusw0	equ	0xFEB
  1720                           fsr0h	equ	0xFEA
  1721                           fsr0l	equ	0xFE9
  1722                           wreg	equ	0xFE8
  1723                           indf1	equ	0xFE7
  1724                           postinc1	equ	0xFE6
  1725                           postdec1	equ	0xFE5
  1726                           preinc1	equ	0xFE4
  1727                           plusw1	equ	0xFE3
  1728                           fsr1h	equ	0xFE2
  1729                           fsr1l	equ	0xFE1
  1730                           bsr	equ	0xFE0
  1731                           indf2	equ	0xFDF
  1732                           postinc2	equ	0xFDE
  1733                           postdec2	equ	0xFDD
  1734                           preinc2	equ	0xFDC
  1735                           plusw2	equ	0xFDB
  1736                           fsr2h	equ	0xFDA
  1737                           fsr2l	equ	0xFD9
  1738                           status	equ	0xFD8

Data Sizes:
    Strings     76
    Constant    40
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     46      46
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_5(CODE[15]), STR_4(CODE[15]), STR_3(CODE[15]), STR_2(CODE[11]), 
		 -> STR_1(CODE[20]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->___llmod
    _putch->_escreve_lcd
    _escreve_lcd->_envia_byte_lcd
    ___llmod->___lldiv
    _limpa_lcd->_envia_byte_lcd
    _inicializa_lcd->_envia_byte_lcd
    _envia_byte_lcd->_envia_nibble_lcd

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0    3633
                                             40 COMRAM     6     6      0
                     _inicializa_lcd
                          _limpa_lcd
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              27    21      6    2140
                                             22 COMRAM    18    12      6
                            ___lldiv
                            ___llmod
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0     702
                                              5 COMRAM     1     1      0
                        _escreve_lcd
 ---------------------------------------------------------------------------------
 (3) _escreve_lcd                                          1     1      0     680
                                              4 COMRAM     1     1      0
                     _envia_byte_lcd
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     311
                                             13 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     314
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _limpa_lcd                                            1     1      0     658
                                              4 COMRAM     1     1      0
                     _envia_byte_lcd
 ---------------------------------------------------------------------------------
 (1) _inicializa_lcd                                       1     1      0     718
                                              4 COMRAM     1     1      0
                     _envia_byte_lcd
                   _envia_nibble_lcd
 ---------------------------------------------------------------------------------
 (4) _envia_byte_lcd                                       2     1      1     658
                                              2 COMRAM     2     1      1
                   _envia_nibble_lcd
 ---------------------------------------------------------------------------------
 (5) _envia_nibble_lcd                                     2     2      0      60
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _inicializa_lcd
     _envia_byte_lcd
       _envia_nibble_lcd
     _envia_nibble_lcd
   _limpa_lcd
     _envia_byte_lcd
   _printf
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     _putch
       _escreve_lcd
         _envia_byte_lcd

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F     2E      2E       1       48.4%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
DATA                 0      0       0       4        0.0%
BITBANK0            A0      0       0       5        0.0%
BANK0               A0      0       0       6        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBIGSFRhh         6A      0       0      21        0.0%
BITBIGSFRhlh         1      0       0      22        0.0%
BITBIGSFRhll         F      0       0      23        0.0%
BITBIGSFRlh          1      0       0      24        0.0%
BITBIGSFRll         21      0       0      25        0.0%
BIGRAM             7FF      0       0      26        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Sun Nov 27 01:48:02 2022

                      l21 0E3C                        l32 0B5C                        l50 0E28  
                      l27 0B00                        l44 0D5A                        l53 0E1A  
                      l47 0E00                        l56 0DDC                        l82 08F4  
                      l95 0A9A                       l132 0C4A                       l125 0C3A  
                     l513 0CD2                       l506 0CC2                       l851 0D52  
                     l843 0CD6                       l845 0CD8                       l847 0D48  
                     l849 0D50                       u300 0902                       u301 08FE  
                     u230 0BCE                       u310 0956                       u231 0BCA  
                     u311 0952                       u240 0BF0                       u320 09A4  
                     u400 0BA0                       u225 0DE8                       u241 0BEC  
                     u321 09A0                       u401 0B9C                       u226 0DEA  
                     u250 0C18                       u330 09BC                       u251 0C14  
                     u331 09B8                       u260 0C62                       u340 09D2  
                     u261 0C5E                       u341 09CE                       u270 0C84  
                     u350 0A78                       u271 0C80                       u351 0A74  
                     u280 0CA2                       u360 0A9A                       u281 0C9E  
                     u361 0A96                       u290 0894                       u370 0AE4  
                     u507 0D54                       u291 0890                       u371 0AE0  
                     u380 0B28                       u381 0B24                       u437 0B08  
                     u390 0B6A                       u447 0E12                       u391 0B66  
                     u457 0D6C                       u467 0D82                       u477 0D94  
                     u487 0DB6                       u497 0D4A                       wreg 000FE8  
                    l1101 0CA2                      l1111 0D76                      l1103 0CB2  
                    l1121 0DA6                      l1113 0D7C                      l1105 0CBC  
                    l1201 0AC2                      l1123 0DBE                      l1115 0D92  
                    l1107 0D5C                      l1131 0E0C                      l1211 0AE8  
                    l1203 0ACE                      l1061 0DF0                      l1125 0DC8  
                    l1117 0D9A                      l1109 0D66                      l1141 08A6  
                    l1133 0876                      l1213 0AF4                      l1205 0AD6  
                    l1063 0DF8                      l1127 0DD2                      l1119 0DA0  
                    l1071 0BB8                      l1151 0926                      l1135 0882  
                    l1231 0B2C                      l1223 0B06                      l1207 0AE4  
                    l1057 0DE0                      l1129 0E02                      l1081 0BFA  
                    l1073 0BCE                      l1065 0E1E                      l1161 096A  
                    l1153 0940                      l1145 08A8                      l1137 0894  
                    l1233 0B48                      l1225 0B0E                      l1241 0B8E  
                    l1209 0AE4                      l1059 0DEA                      l1083 0C18  
                    l1075 0BD6                      l1091 0C4C                      l1067 0E36  
                    l1171 09A8                      l1155 0948                      l1147 0902  
                    l1139 089E                      l1235 0B6A                      l1227 0B1A  
                    l1085 0C28                      l1077 0BE2                      l1069 0BA8  
                    l1093 0C62                      l1181 09E2                      l1173 09AA  
                    l1157 0956                      l1149 091A                      l1261 08CE  
                    l1237 0B6E                      l1229 0B28                      l1087 0C2A  
                    l1079 0BF0                      l1095 0C6A                      l1183 0A58  
                    l1175 09BC                      l1167 096E                      l1159 095A  
                    l1089 0C34                      l1097 0C76                      l1185 0A5E  
                    l1177 09D2                      l1193 0A9C                      l1099 0C84  
                    l1179 09D8                      l1187 0A78                      l1195 0AB4  
                    l1197 0ABA                      l1199 0ABE                      STR_1 0829  
                    STR_2 086A                      STR_3 083D                      STR_4 084C  
                    STR_5 085B               main@counter 0029              ?_escreve_lcd 0001  
  envia_byte_lcd@endereco 0004                      _main 0A9C                      fsr2h 000FDA  
                    fsr2l 000FD9                      prodh 000FF4                      prodl 000FF3  
                    start 0004              ___param_bank 000000                     ?_main 0001  
         __end_of___lldiv 0C4C           __end_of___llmod 0CD4                     _PORTD 000F83  
                   _TRISB 000F93                     _TRISD 000F95           __end_of_dpowers 0829  
                   _putch 0E34                     tablat 000FF5                     status 000FD8  
         __initialization 0E2A              __end_of_main 0BA8                    ??_main 0029  
           __activetblptr 000002          ___llmod@dividend 000E                    ?_putch 0001  
        _envia_nibble_lcd 0CD4                 ??___lldiv 0009                 ??___llmod 0016  
                  isa$std 000001                    _printf 0876              __mediumconst 0000  
                  tblptrh 000FF7                    tblptrl 000FF6                    tblptru 000FF8  
              __accesstop 0060   __end_of__initialization 0E2A        envia_byte_lcd@dado 0003  
           ___rparam_used 000001              escreve_lcd@c 0005            __pcstackCOMRAM 0001  
           __end_of_putch 0E3E            _envia_byte_lcd 0DDE                   ??_putch 0006  
                 ?_printf 0017    __end_of_envia_byte_lcd 0E02            _inicializa_lcd 0D5C  
                 __Hparam 0000                   __Lparam 0000                   ___lldiv 0BA8  
                 ___llmod 0C4C              __psmallconst 0800                   __pcinit 0E2A  
                 __ramtop 0800                   __ptext0 0A9C                   __ptext1 0876  
                 __ptext2 0E34                   __ptext3 0E1C                   __ptext4 0C4C  
                 __ptext5 0BA8                   __ptext6 0E02                   __ptext7 0D5C  
                 __ptext8 0DDE                   __ptext9 0CD4                   _dpowers 0801  
         ?_envia_byte_lcd 0003         __end_of_limpa_lcd 0E1C  __end_of_envia_nibble_lcd 0D5C  
  __end_of_inicializa_lcd 0DDE      end_of_initialization 0E2A             __Lmediumconst 0000  
         ___lldiv@divisor 0005           ___lldiv@counter 000D                   printf@c 0028  
                 printf@f 0017                   postdec2 000FDD                   postinc2 000FDE  
               _PORTBbits 000F81                 _PORTDbits 000F83           ?_inicializa_lcd 0001  
          __end_of_printf 0A9C       start_initialization 0E2A             ??_escreve_lcd 0005  
         ___llmod@divisor 0012           ___llmod@counter 0016                  ??_printf 001D  
     __end_of_escreve_lcd 0E2A                  ?___lldiv 0001                  ?___llmod 000E  
        ??_envia_byte_lcd 0004               __smallconst 0800         ?_envia_nibble_lcd 0001  
               _limpa_lcd 0E02        ??_envia_nibble_lcd 0001                printf@flag 0023  
              printf@prec 001F          ??_inicializa_lcd 0005                ?_limpa_lcd 0001  
             _escreve_lcd 0E1C                  __Hrparam 0000                  __Lrparam 0000  
                isa$xinst 000000                 printf@val 0024                 putch@data 0006  
             ??_limpa_lcd 0005          ___lldiv@dividend 0001                  printf@ap 0021  
    envia_nibble_lcd@dado 0002          ___lldiv@quotient 0009           main@start_reset 002D  
