

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Sun Dec 04 10:49:33 2022

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1,inline
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=2
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=2
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1
    16                           	psect	text8,global,reloc=2,class=CODE,delta=1
    17                           	psect	text9,global,reloc=2,class=CODE,delta=1
    18                           	psect	text10,global,reloc=2,class=CODE,delta=1
    19                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    20                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    21                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    22   000000                     
    23                           ; Version 2.40
    24                           ; Generated 04/07/2022 GMT
    25                           ; 
    26                           ; Copyright Â© 2022, Microchip Technology Inc. and its subsidiaries ("Microchip")
    27                           ; All rights reserved.
    28                           ; 
    29                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    30                           ; 
    31                           ; Redistribution and use in source and binary forms, with or without modification, are
    32                           ; permitted provided that the following conditions are met:
    33                           ; 
    34                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    35                           ;        conditions and the following disclaimer.
    36                           ; 
    37                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    38                           ;        of conditions and the following disclaimer in the documentation and/or other
    39                           ;        materials provided with the distribution. Publication is not required when
    40                           ;        this file is used in an embedded application.
    41                           ; 
    42                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    43                           ;        software without specific prior written permission.
    44                           ; 
    45                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    46                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    47                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    48                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    49                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    50                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    51                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    52                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    53                           ; 
    54                           ; 
    55                           ; Code-generator required, PIC18F4550 Definitions
    56                           ; 
    57                           ; SFR Addresses
    58   000000                     
    59                           	psect	smallconst
    60   000800                     __psmallconst:
    61                           	callstack 0
    62   000800  00                 	db	0
    63   000801                     _dpowers:
    64                           	callstack 0
    65   000801  0001               	dw	1
    66   000803  0000               	dw	0
    67   000805  000A               	dw	10
    68   000807  0000               	dw	0
    69   000809  0064               	dw	100
    70   00080B  0000               	dw	0
    71   00080D  03E8               	dw	1000
    72   00080F  0000               	dw	0
    73   000811  2710               	dw	10000
    74   000813  0000               	dw	0
    75   000815  86A0               	dw	34464
    76   000817  0001               	dw	1
    77   000819  4240               	dw	16960
    78   00081B  000F               	dw	15
    79   00081D  9680               	dw	38528
    80   00081F  0098               	dw	152
    81   000821  E100               	dw	57600
    82   000823  05F5               	dw	1525
    83   000825  CA00               	dw	51712
    84   000827  3B9A               	dw	15258
    85   000829                     __end_of_dpowers:
    86                           	callstack 0
    87   000000                     _PORTDbits	set	3971
    88   000000                     _PORTCbits	set	3970
    89   000000                     _PORTBbits	set	3969
    90   000000                     _PORTB	set	3969
    91   000000                     _PORTD	set	3971
    92   000000                     _PORTC	set	3970
    93   000000                     _TRISB	set	3987
    94   000000                     _TRISD	set	3989
    95   000000                     _TRISC	set	3988
    96   000829                     STR_6:
    97   000829  52                 	db	82	;'R'
    98   00082A  65                 	db	101	;'e'
    99   00082B  69                 	db	105	;'i'
   100   00082C  6E                 	db	110	;'n'
   101   00082D  69                 	db	105	;'i'
   102   00082E  63                 	db	99	;'c'
   103   00082F  69                 	db	105	;'i'
   104   000830  61                 	db	97	;'a'
   105   000831  6E                 	db	110	;'n'
   106   000832  64                 	db	100	;'d'
   107   000833  6F                 	db	111	;'o'
   108   000834  2E                 	db	46
   109   000835  2E                 	db	46
   110   000836  2E                 	db	46
   111   000837  00                 	db	0
   112   000838                     STR_4:
   113   000838  54                 	db	84	;'T'
   114   000839  65                 	db	101	;'e'
   115   00083A  6D                 	db	109	;'m'
   116   00083B  70                 	db	112	;'p'
   117   00083C  6F                 	db	111	;'o'
   118   00083D  20                 	db	32
   119   00083E  31                 	db	49	;'1'
   120   00083F  3A                 	db	58	;':'
   121   000840  20                 	db	32
   122   000841  25                 	db	37
   123   000842  6C                 	db	108	;'l'
   124   000843  64                 	db	100	;'d'
   125   000844  6D                 	db	109	;'m'
   126   000845  73                 	db	115	;'s'
   127   000846  00                 	db	0
   128   000847                     STR_5:
   129   000847  54                 	db	84	;'T'
   130   000848  65                 	db	101	;'e'
   131   000849  6D                 	db	109	;'m'
   132   00084A  70                 	db	112	;'p'
   133   00084B  6F                 	db	111	;'o'
   134   00084C  20                 	db	32
   135   00084D  32                 	db	50	;'2'
   136   00084E  3A                 	db	58	;':'
   137   00084F  20                 	db	32
   138   000850  25                 	db	37
   139   000851  6C                 	db	108	;'l'
   140   000852  64                 	db	100	;'d'
   141   000853  6D                 	db	109	;'m'
   142   000854  73                 	db	115	;'s'
   143   000855  00                 	db	0
   144   000856                     STR_1:
   145   000856  41                 	db	65	;'A'
   146   000857  70                 	db	112	;'p'
   147   000858  65                 	db	101	;'e'
   148   000859  72                 	db	114	;'r'
   149   00085A  74                 	db	116	;'t'
   150   00085B  65                 	db	101	;'e'
   151   00085C  20                 	db	32
   152   00085D  70                 	db	112	;'p'
   153   00085E  61                 	db	97	;'a'
   154   00085F  72                 	db	114	;'r'
   155   000860  61                 	db	97	;'a'
   156   000861  00                 	db	0
   157   000862                     STR_2:
   158   000862  69                 	db	105	;'i'
   159   000863  6E                 	db	110	;'n'
   160   000864  69                 	db	105	;'i'
   161   000865  63                 	db	99	;'c'
   162   000866  69                 	db	105	;'i'
   163   000867  61                 	db	97	;'a'
   164   000868  72                 	db	114	;'r'
   165   000869  21                 	db	33
   166   00086A  21                 	db	33
   167   00086B  21                 	db	33
   168   00086C  00                 	db	0
   169   00086D                     STR_3:
   170   00086D  52                 	db	82	;'R'
   171   00086E  6F                 	db	111	;'o'
   172   00086F  64                 	db	100	;'d'
   173   000870  61                 	db	97	;'a'
   174   000871  6E                 	db	110	;'n'
   175   000872  64                 	db	100	;'d'
   176   000873  6F                 	db	111	;'o'
   177   000874  2E                 	db	46
   178   000875  2E                 	db	46
   179   000876  2E                 	db	46
   180   000877  00                 	db	0
   181   000878  00                 	db	0	; dummy byte at the end
   182   000000                     
   183                           ; #config settings
   184                           
   185                           	psect	cinit
   186   000F9C                     __pcinit:
   187                           	callstack 0
   188   000F9C                     start_initialization:
   189                           	callstack 0
   190   000F9C                     __initialization:
   191                           	callstack 0
   192   000F9C                     end_of_initialization:
   193                           	callstack 0
   194   000F9C                     __end_of__initialization:
   195                           	callstack 0
   196   000F9C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   197   000F9E  6EF8               	movwf	tblptru,c
   198   000FA0  0100               	movlb	0
   199   000FA2  EF3D  F004         	goto	_main	;jump to C main() function
   200                           
   201                           	psect	cstackCOMRAM
   202   000001                     __pcstackCOMRAM:
   203                           	callstack 0
   204   000001                     ??_envia_nibble_lcd:
   205   000001                     ?___lldiv:
   206                           	callstack 0
   207   000001                     ___lldiv@dividend:
   208                           	callstack 0
   209                           
   210                           ; 4 bytes @ 0x0
   211   000001                     	ds	1
   212   000002                     envia_nibble_lcd@dado:
   213                           	callstack 0
   214                           
   215                           ; 1 bytes @ 0x1
   216   000002                     	ds	1
   217   000003                     envia_byte_lcd@dado:
   218                           	callstack 0
   219                           
   220                           ; 1 bytes @ 0x2
   221   000003                     	ds	1
   222   000004                     envia_byte_lcd@endereco:
   223                           	callstack 0
   224                           
   225                           ; 1 bytes @ 0x3
   226   000004                     	ds	1
   227   000005                     ??_inicializa_lcd:
   228   000005                     ??_limpa_lcd:
   229   000005                     escreve_lcd@c:
   230                           	callstack 0
   231   000005                     caracter_inicio@coluna:
   232                           	callstack 0
   233   000005                     ___lldiv@divisor:
   234                           	callstack 0
   235                           
   236                           ; 4 bytes @ 0x4
   237   000005                     	ds	1
   238   000006                     putch@data:
   239                           	callstack 0
   240   000006                     caracter_inicio@linha:
   241                           	callstack 0
   242                           
   243                           ; 1 bytes @ 0x5
   244   000006                     	ds	1
   245   000007                     caracter_inicio@posicao:
   246                           	callstack 0
   247                           
   248                           ; 1 bytes @ 0x6
   249   000007                     	ds	2
   250   000009                     ___lldiv@quotient:
   251                           	callstack 0
   252                           
   253                           ; 4 bytes @ 0x8
   254   000009                     	ds	4
   255   00000D                     ___lldiv@counter:
   256                           	callstack 0
   257                           
   258                           ; 1 bytes @ 0xC
   259   00000D                     	ds	1
   260   00000E                     ?___llmod:
   261                           	callstack 0
   262   00000E                     ___llmod@dividend:
   263                           	callstack 0
   264                           
   265                           ; 4 bytes @ 0xD
   266   00000E                     	ds	4
   267   000012                     ___llmod@divisor:
   268                           	callstack 0
   269                           
   270                           ; 4 bytes @ 0x11
   271   000012                     	ds	4
   272   000016                     ___llmod@counter:
   273                           	callstack 0
   274                           
   275                           ; 1 bytes @ 0x15
   276   000016                     	ds	1
   277   000017                     ?_printf:
   278                           	callstack 0
   279   000017                     printf@f:
   280                           	callstack 0
   281                           
   282                           ; 2 bytes @ 0x16
   283   000017                     	ds	6
   284   00001D                     ??_printf:
   285                           
   286                           ; 1 bytes @ 0x1C
   287   00001D                     	ds	2
   288   00001F                     printf@prec:
   289                           	callstack 0
   290                           
   291                           ; 2 bytes @ 0x1E
   292   00001F                     	ds	2
   293   000021                     printf@ap:
   294                           	callstack 0
   295                           
   296                           ; 2 bytes @ 0x20
   297   000021                     	ds	2
   298   000023                     printf@flag:
   299                           	callstack 0
   300                           
   301                           ; 1 bytes @ 0x22
   302   000023                     	ds	1
   303   000024                     printf@val:
   304                           	callstack 0
   305                           
   306                           ; 4 bytes @ 0x23
   307   000024                     	ds	4
   308   000028                     printf@c:
   309                           	callstack 0
   310                           
   311                           ; 1 bytes @ 0x27
   312   000028                     	ds	1
   313   000029                     ??_main:
   314                           
   315                           ; 1 bytes @ 0x28
   316   000029                     	ds	2
   317   00002B                     main@timeJ1:
   318                           	callstack 0
   319                           
   320                           ; 4 bytes @ 0x2A
   321   00002B                     	ds	4
   322   00002F                     main@timeJ2:
   323                           	callstack 0
   324                           
   325                           ; 4 bytes @ 0x2E
   326   00002F                     	ds	4
   327   000033                     main@pressedJ1:
   328                           	callstack 0
   329                           
   330                           ; 2 bytes @ 0x32
   331   000033                     	ds	2
   332   000035                     main@pressedJ2:
   333                           	callstack 0
   334                           
   335                           ; 2 bytes @ 0x34
   336   000035                     	ds	2
   337   000037                     main@start_reset:
   338                           	callstack 0
   339                           
   340                           ; 2 bytes @ 0x36
   341   000037                     	ds	2
   342   000039                     main@counter:
   343                           	callstack 0
   344                           
   345                           ; 4 bytes @ 0x38
   346   000039                     	ds	4
   347                           
   348 ;;
   349 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   350 ;;
   351 ;; *************** function _main *****************
   352 ;; Defined at:
   353 ;;		line 68 in file "main.c"
   354 ;; Parameters:    Size  Location     Type
   355 ;;		None
   356 ;; Auto vars:     Size  Location     Type
   357 ;;  counter         4   56[COMRAM] long 
   358 ;;  timeJ2          4   46[COMRAM] long 
   359 ;;  timeJ1          4   42[COMRAM] long 
   360 ;;  start_reset     2   54[COMRAM] int 
   361 ;;  pressedJ2       2   52[COMRAM] int 
   362 ;;  pressedJ1       2   50[COMRAM] int 
   363 ;; Return value:  Size  Location     Type
   364 ;;                  1    wreg      void 
   365 ;; Registers used:
   366 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   367 ;; Tracked objects:
   368 ;;		On entry : 0/0
   369 ;;		On exit  : 0/0
   370 ;;		Unchanged: 0/0
   371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   372 ;;      Params:         0       0       0       0       0       0       0       0       0
   373 ;;      Locals:        18       0       0       0       0       0       0       0       0
   374 ;;      Temps:          2       0       0       0       0       0       0       0       0
   375 ;;      Totals:        20       0       0       0       0       0       0       0       0
   376 ;;Total ram usage:       20 bytes
   377 ;; Hardware stack levels required when called: 5
   378 ;; This function calls:
   379 ;;		_caracter_inicio
   380 ;;		_inicializa_lcd
   381 ;;		_limpa_lcd
   382 ;;		_printf
   383 ;; This function is called by:
   384 ;;		Startup code after reset
   385 ;; This function uses a non-reentrant model
   386 ;;
   387                           
   388                           	psect	text0
   389   00087A                     __ptext0:
   390                           	callstack 0
   391   00087A                     _main:
   392                           	callstack 26
   393   00087A                     
   394                           ;main.c: 69:     PORTB = 00;
   395   00087A  0E00               	movlw	0
   396   00087C  6E81               	movwf	129,c	;volatile
   397                           
   398                           ;main.c: 70:     TRISB = 0x01;
   399   00087E  0E01               	movlw	1
   400   000880  6E93               	movwf	147,c	;volatile
   401                           
   402                           ;main.c: 72:     PORTC = 0;
   403   000882  0E00               	movlw	0
   404   000884  6E82               	movwf	130,c	;volatile
   405                           
   406                           ;main.c: 73:     TRISC = 0x00;
   407   000886  0E00               	movlw	0
   408   000888  6E94               	movwf	148,c	;volatile
   409                           
   410                           ;main.c: 75:     PORTD = 0;
   411   00088A  0E00               	movlw	0
   412   00088C  6E83               	movwf	131,c	;volatile
   413                           
   414                           ;main.c: 76:     TRISD = 0x00;
   415   00088E  0E00               	movlw	0
   416   000890  6E95               	movwf	149,c	;volatile
   417   000892                     
   418                           ;main.c: 78:     inicializa_lcd();
   419   000892  EC46  F007         	call	_inicializa_lcd	;wreg free
   420   000896                     
   421                           ;main.c: 79:     limpa_lcd();
   422   000896  ECBA  F007         	call	_limpa_lcd	;wreg free
   423   00089A                     
   424                           ;main.c: 81:     caracter_inicio(1,3);
   425   00089A  0E03               	movlw	3
   426   00089C  6E05               	movwf	caracter_inicio@coluna^0,c
   427   00089E  0E01               	movlw	1
   428   0008A0  EC87  F007         	call	_caracter_inicio
   429   0008A4                     
   430                           ;main.c: 82:     printf("Aperte para");
   431   0008A4  0E56               	movlw	low STR_1
   432   0008A6  6E17               	movwf	printf@f^0,c
   433   0008A8  0E08               	movlw	high STR_1
   434   0008AA  6E18               	movwf	(printf@f+1)^0,c
   435   0008AC  EC59  F005         	call	_printf	;wreg free
   436   0008B0                     
   437                           ;main.c: 83:     caracter_inicio(2,3);
   438   0008B0  0E03               	movlw	3
   439   0008B2  6E05               	movwf	caracter_inicio@coluna^0,c
   440   0008B4  0E02               	movlw	2
   441   0008B6  EC87  F007         	call	_caracter_inicio
   442   0008BA                     
   443                           ;main.c: 84:     printf("iniciar!!!");
   444   0008BA  0E62               	movlw	low STR_2
   445   0008BC  6E17               	movwf	printf@f^0,c
   446   0008BE  0E08               	movlw	high STR_2
   447   0008C0  6E18               	movwf	(printf@f+1)^0,c
   448   0008C2  EC59  F005         	call	_printf	;wreg free
   449   0008C6                     l36:
   450                           
   451                           ;main.c: 86:         int start_reset = 0;
   452   0008C6  0E00               	movlw	0
   453   0008C8  6E38               	movwf	(main@start_reset+1)^0,c
   454   0008CA  0E00               	movlw	0
   455   0008CC  6E37               	movwf	main@start_reset^0,c
   456                           
   457                           ;main.c: 87:         int pressedJ1 = 0;
   458   0008CE  0E00               	movlw	0
   459   0008D0  6E34               	movwf	(main@pressedJ1+1)^0,c
   460   0008D2  0E00               	movlw	0
   461   0008D4  6E33               	movwf	main@pressedJ1^0,c
   462                           
   463                           ;main.c: 88:         int pressedJ2 = 0;
   464   0008D6  0E00               	movlw	0
   465   0008D8  6E36               	movwf	(main@pressedJ2+1)^0,c
   466   0008DA  0E00               	movlw	0
   467   0008DC  6E35               	movwf	main@pressedJ2^0,c
   468                           
   469                           ;main.c: 89:         long int timeJ1 = 0;
   470   0008DE  0E00               	movlw	0
   471   0008E0  6E2B               	movwf	main@timeJ1^0,c
   472   0008E2  0E00               	movlw	0
   473   0008E4  6E2C               	movwf	(main@timeJ1+1)^0,c
   474   0008E6  0E00               	movlw	0
   475   0008E8  6E2D               	movwf	(main@timeJ1+2)^0,c
   476   0008EA  0E00               	movlw	0
   477   0008EC  6E2E               	movwf	(main@timeJ1+3)^0,c
   478                           
   479                           ;main.c: 90:         long int timeJ2 = 0;
   480   0008EE  0E00               	movlw	0
   481   0008F0  6E2F               	movwf	main@timeJ2^0,c
   482   0008F2  0E00               	movlw	0
   483   0008F4  6E30               	movwf	(main@timeJ2+1)^0,c
   484   0008F6  0E00               	movlw	0
   485   0008F8  6E31               	movwf	(main@timeJ2+2)^0,c
   486   0008FA  0E00               	movlw	0
   487   0008FC  6E32               	movwf	(main@timeJ2+3)^0,c
   488                           
   489                           ;main.c: 91:         long int counter = 0;
   490   0008FE  0E00               	movlw	0
   491   000900  6E39               	movwf	main@counter^0,c
   492   000902  0E00               	movlw	0
   493   000904  6E3A               	movwf	(main@counter+1)^0,c
   494   000906  0E00               	movlw	0
   495   000908  6E3B               	movwf	(main@counter+2)^0,c
   496   00090A  0E00               	movlw	0
   497   00090C  6E3C               	movwf	(main@counter+3)^0,c
   498   00090E                     
   499                           ;main.c: 93:         if(PORTBbits.RB0 == 0x01){
   500   00090E  A081               	btfss	129,0,c	;volatile
   501   000910  EF8C  F004         	goto	u421
   502   000914  EF8E  F004         	goto	u420
   503   000918                     u421:
   504   000918  EF4C  F005         	goto	l1332
   505   00091C                     u420:
   506   00091C                     
   507                           ;main.c: 94:             PORTCbits.RC0 = 1;
   508   00091C  8082               	bsf	130,0,c	;volatile
   509   00091E                     
   510                           ;main.c: 95:             _delay((unsigned long)((500)*(4000000/4000.0)));
   511   00091E  0E03               	movlw	3
   512   000920  6E2A               	movwf	(??_main+1)^0,c
   513   000922  0E8A               	movlw	138
   514   000924  6E29               	movwf	??_main^0,c
   515   000926  0E56               	movlw	86
   516   000928                     u497:
   517   000928  2EE8               	decfsz	wreg,f,c
   518   00092A  D7FE               	bra	u497
   519   00092C  2E29               	decfsz	??_main^0,f,c
   520   00092E  D7FC               	bra	u497
   521   000930  2E2A               	decfsz	(??_main+1)^0,f,c
   522   000932  D7FA               	bra	u497
   523   000934                     
   524                           ;main.c: 96:             PORTCbits.RC0 = 0;
   525   000934  9082               	bcf	130,0,c	;volatile
   526   000936                     
   527                           ;main.c: 98:             limpa_lcd();
   528   000936  ECBA  F007         	call	_limpa_lcd	;wreg free
   529   00093A                     
   530                           ;main.c: 99:             printf("Rodando...");
   531   00093A  0E6D               	movlw	low STR_3
   532   00093C  6E17               	movwf	printf@f^0,c
   533   00093E  0E08               	movlw	high STR_3
   534   000940  6E18               	movwf	(printf@f+1)^0,c
   535   000942  EC59  F005         	call	_printf	;wreg free
   536   000946                     
   537                           ;main.c: 101:             start_reset = 1;
   538   000946  0E00               	movlw	0
   539   000948  6E38               	movwf	(main@start_reset+1)^0,c
   540   00094A  0E01               	movlw	1
   541   00094C  6E37               	movwf	main@start_reset^0,c
   542   00094E  EF4C  F005         	goto	l1332
   543   000952                     l1280:
   544                           
   545                           ;main.c: 105:             _delay((unsigned long)((1)*(4000000/4000.0)));
   546   000952  0EC8               	movlw	200
   547   000954                     u507:
   548   000954  D000               	nop2	
   549   000956  2EE8               	decfsz	wreg,f,c
   550   000958  D7FD               	bra	u507
   551   00095A                     
   552                           ;main.c: 106:             counter++;
   553   00095A  0E01               	movlw	1
   554   00095C  2639               	addwf	main@counter^0,f,c
   555   00095E  0E00               	movlw	0
   556   000960  223A               	addwfc	(main@counter+1)^0,f,c
   557   000962  223B               	addwfc	(main@counter+2)^0,f,c
   558   000964  223C               	addwfc	(main@counter+3)^0,f,c
   559   000966                     
   560                           ;main.c: 108:             if(PORTBbits.RB1 == 0x01){
   561   000966  A281               	btfss	129,1,c	;volatile
   562   000968  EFB8  F004         	goto	u431
   563   00096C  EFBA  F004         	goto	u430
   564   000970                     u431:
   565   000970  EFC7  F004         	goto	l1292
   566   000974                     u430:
   567   000974                     
   568                           ;main.c: 109:                 pressedJ1 = 1;
   569   000974  0E00               	movlw	0
   570   000976  6E34               	movwf	(main@pressedJ1+1)^0,c
   571   000978  0E01               	movlw	1
   572   00097A  6E33               	movwf	main@pressedJ1^0,c
   573   00097C                     
   574                           ;main.c: 110:                 timeJ1 = counter;
   575   00097C  C039  F02B         	movff	main@counter,main@timeJ1
   576   000980  C03A  F02C         	movff	main@counter+1,main@timeJ1+1
   577   000984  C03B  F02D         	movff	main@counter+2,main@timeJ1+2
   578   000988  C03C  F02E         	movff	main@counter+3,main@timeJ1+3
   579   00098C                     
   580                           ;main.c: 112:                 PORTCbits.RC1 = 1;
   581   00098C  8282               	bsf	130,1,c	;volatile
   582   00098E                     l1292:
   583                           
   584                           ;main.c: 115:             if(PORTBbits.RB2 == 0x01){
   585   00098E  A481               	btfss	129,2,c	;volatile
   586   000990  EFCC  F004         	goto	u441
   587   000994  EFCE  F004         	goto	u440
   588   000998                     u441:
   589   000998  EFDB  F004         	goto	l1300
   590   00099C                     u440:
   591   00099C                     
   592                           ;main.c: 116:                 pressedJ2 = 1;
   593   00099C  0E00               	movlw	0
   594   00099E  6E36               	movwf	(main@pressedJ2+1)^0,c
   595   0009A0  0E01               	movlw	1
   596   0009A2  6E35               	movwf	main@pressedJ2^0,c
   597   0009A4                     
   598                           ;main.c: 117:                 timeJ2 = counter;
   599   0009A4  C039  F02F         	movff	main@counter,main@timeJ2
   600   0009A8  C03A  F030         	movff	main@counter+1,main@timeJ2+1
   601   0009AC  C03B  F031         	movff	main@counter+2,main@timeJ2+2
   602   0009B0  C03C  F032         	movff	main@counter+3,main@timeJ2+3
   603   0009B4                     
   604                           ;main.c: 119:                 PORTCbits.RC2 = 1;
   605   0009B4  8482               	bsf	130,2,c	;volatile
   606   0009B6                     l1300:
   607                           
   608                           ;main.c: 122:             if(pressedJ1 == 1 && pressedJ2 == 1){
   609   0009B6  0433               	decf	main@pressedJ1^0,w,c
   610   0009B8  1034               	iorwf	(main@pressedJ1+1)^0,w,c
   611   0009BA  A4D8               	btfss	status,2,c
   612   0009BC  EFE2  F004         	goto	u451
   613   0009C0  EFE4  F004         	goto	u450
   614   0009C4                     u451:
   615   0009C4  EF4C  F005         	goto	l1332
   616   0009C8                     u450:
   617   0009C8  0435               	decf	main@pressedJ2^0,w,c
   618   0009CA  1036               	iorwf	(main@pressedJ2+1)^0,w,c
   619   0009CC  A4D8               	btfss	status,2,c
   620   0009CE  EFEB  F004         	goto	u461
   621   0009D2  EFED  F004         	goto	u460
   622   0009D6                     u461:
   623   0009D6  EF4C  F005         	goto	l1332
   624   0009DA                     u460:
   625   0009DA                     
   626                           ;main.c: 123:                 limpa_lcd();
   627   0009DA  ECBA  F007         	call	_limpa_lcd	;wreg free
   628                           
   629                           ;main.c: 124:                 caracter_inicio(1,1);
   630   0009DE  0E01               	movlw	1
   631   0009E0  6E05               	movwf	caracter_inicio@coluna^0,c
   632   0009E2  0E01               	movlw	1
   633   0009E4  EC87  F007         	call	_caracter_inicio
   634   0009E8                     
   635                           ;main.c: 125:                 printf("Tempo 1: %ldms", timeJ1);
   636   0009E8  0E38               	movlw	low STR_4
   637   0009EA  6E17               	movwf	printf@f^0,c
   638   0009EC  0E08               	movlw	high STR_4
   639   0009EE  6E18               	movwf	(printf@f+1)^0,c
   640   0009F0  C02B  F019         	movff	main@timeJ1,?_printf+2
   641   0009F4  C02C  F01A         	movff	main@timeJ1+1,?_printf+3
   642   0009F8  C02D  F01B         	movff	main@timeJ1+2,?_printf+4
   643   0009FC  C02E  F01C         	movff	main@timeJ1+3,?_printf+5
   644   000A00  EC59  F005         	call	_printf	;wreg free
   645   000A04                     
   646                           ;main.c: 126:                 caracter_inicio(2,1);
   647   000A04  0E01               	movlw	1
   648   000A06  6E05               	movwf	caracter_inicio@coluna^0,c
   649   000A08  0E02               	movlw	2
   650   000A0A  EC87  F007         	call	_caracter_inicio
   651                           
   652                           ;main.c: 127:                 printf("Tempo 2: %ldms", timeJ2);
   653   000A0E  0E47               	movlw	low STR_5
   654   000A10  6E17               	movwf	printf@f^0,c
   655   000A12  0E08               	movlw	high STR_5
   656   000A14  6E18               	movwf	(printf@f+1)^0,c
   657   000A16  C02F  F019         	movff	main@timeJ2,?_printf+2
   658   000A1A  C030  F01A         	movff	main@timeJ2+1,?_printf+3
   659   000A1E  C031  F01B         	movff	main@timeJ2+2,?_printf+4
   660   000A22  C032  F01C         	movff	main@timeJ2+3,?_printf+5
   661   000A26  EC59  F005         	call	_printf	;wreg free
   662   000A2A                     l1310:
   663                           
   664                           ;main.c: 130:                     if(PORTBbits.RB0 == 0x01){
   665   000A2A  A081               	btfss	129,0,c	;volatile
   666   000A2C  EF1A  F005         	goto	u471
   667   000A30  EF1C  F005         	goto	u470
   668   000A34                     u471:
   669   000A34  EF15  F005         	goto	l1310
   670   000A38                     u470:
   671   000A38                     
   672                           ;main.c: 132:                         PORTCbits.RC0 = 0;
   673   000A38  9082               	bcf	130,0,c	;volatile
   674                           
   675                           ;main.c: 133:                         PORTCbits.RC1 = 0;
   676   000A3A  9282               	bcf	130,1,c	;volatile
   677                           
   678                           ;main.c: 134:                         PORTCbits.RC2 = 0;
   679   000A3C  9482               	bcf	130,2,c	;volatile
   680   000A3E                     
   681                           ;main.c: 136:                         limpa_lcd();
   682   000A3E  ECBA  F007         	call	_limpa_lcd	;wreg free
   683   000A42                     
   684                           ;main.c: 137:                         printf("Reiniciando...");
   685   000A42  0E29               	movlw	low STR_6
   686   000A44  6E17               	movwf	printf@f^0,c
   687   000A46  0E08               	movlw	high STR_6
   688   000A48  6E18               	movwf	(printf@f+1)^0,c
   689   000A4A  EC59  F005         	call	_printf	;wreg free
   690   000A4E                     
   691                           ;main.c: 138:                         _delay((unsigned long)((1000)*(4000000/4000.0)));
   692   000A4E  0E06               	movlw	6
   693   000A50  6E2A               	movwf	(??_main+1)^0,c
   694   000A52  0E13               	movlw	19
   695   000A54  6E29               	movwf	??_main^0,c
   696   000A56  0EAE               	movlw	174
   697   000A58                     u517:
   698   000A58  2EE8               	decfsz	wreg,f,c
   699   000A5A  D7FE               	bra	u517
   700   000A5C  2E29               	decfsz	??_main^0,f,c
   701   000A5E  D7FC               	bra	u517
   702   000A60  2E2A               	decfsz	(??_main+1)^0,f,c
   703   000A62  D7FA               	bra	u517
   704   000A64                     
   705                           ;main.c: 139:                         limpa_lcd();
   706   000A64  ECBA  F007         	call	_limpa_lcd	;wreg free
   707   000A68                     
   708                           ;main.c: 143:                         caracter_inicio(1,1);
   709   000A68  0E01               	movlw	1
   710   000A6A  6E05               	movwf	caracter_inicio@coluna^0,c
   711   000A6C  0E01               	movlw	1
   712   000A6E  EC87  F007         	call	_caracter_inicio
   713   000A72                     
   714                           ;main.c: 144:                         printf("Aperte para");
   715   000A72  0E56               	movlw	low STR_1
   716   000A74  6E17               	movwf	printf@f^0,c
   717   000A76  0E08               	movlw	high STR_1
   718   000A78  6E18               	movwf	(printf@f+1)^0,c
   719   000A7A  EC59  F005         	call	_printf	;wreg free
   720   000A7E                     
   721                           ;main.c: 145:                         caracter_inicio(2,1);
   722   000A7E  0E01               	movlw	1
   723   000A80  6E05               	movwf	caracter_inicio@coluna^0,c
   724   000A82  0E02               	movlw	2
   725   000A84  EC87  F007         	call	_caracter_inicio
   726   000A88                     
   727                           ;main.c: 146:                         printf("iniciar!!!");
   728   000A88  0E62               	movlw	low STR_2
   729   000A8A  6E17               	movwf	printf@f^0,c
   730   000A8C  0E08               	movlw	high STR_2
   731   000A8E  6E18               	movwf	(printf@f+1)^0,c
   732   000A90  EC59  F005         	call	_printf	;wreg free
   733                           
   734                           ;main.c: 148:                         break;
   735   000A94  EF63  F004         	goto	l36
   736   000A98                     l1332:
   737                           
   738                           ;main.c: 104:         while(start_reset) {
   739   000A98  5037               	movf	main@start_reset^0,w,c
   740   000A9A  1038               	iorwf	(main@start_reset+1)^0,w,c
   741   000A9C  A4D8               	btfss	status,2,c
   742   000A9E  EF53  F005         	goto	u481
   743   000AA2  EF55  F005         	goto	u480
   744   000AA6                     u481:
   745   000AA6  EFA9  F004         	goto	l1280
   746   000AAA                     u480:
   747   000AAA  EF63  F004         	goto	l36
   748   000AAE  EF02  F000         	goto	start
   749   000AB2                     __end_of_main:
   750                           	callstack 0
   751                           
   752 ;; *************** function _printf *****************
   753 ;; Defined at:
   754 ;;		line 477 in file "P:\Microchip\pic\sources\c90\common\doprnt.c"
   755 ;; Parameters:    Size  Location     Type
   756 ;;  f               2   22[COMRAM] PTR const unsigned char 
   757 ;;		 -> STR_8(11), STR_7(12), STR_6(15), STR_5(15), 
   758 ;;		 -> STR_4(15), STR_3(11), STR_2(11), STR_1(12), 
   759 ;; Auto vars:     Size  Location     Type
   760 ;;  val             4   35[COMRAM] unsigned long 
   761 ;;  tmpval          4    0        struct .
   762 ;;  cp              3    0        PTR const unsigned char 
   763 ;;  ap              2   32[COMRAM] PTR void [1]
   764 ;;		 -> ?_printf(2), 
   765 ;;  prec            2   30[COMRAM] int 
   766 ;;  len             2    0        unsigned int 
   767 ;;  c               1   39[COMRAM] unsigned char 
   768 ;;  flag            1   34[COMRAM] unsigned char 
   769 ;; Return value:  Size  Location     Type
   770 ;;                  2   22[COMRAM] int 
   771 ;; Registers used:
   772 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   773 ;; Tracked objects:
   774 ;;		On entry : 0/0
   775 ;;		On exit  : 0/0
   776 ;;		Unchanged: 0/0
   777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   778 ;;      Params:         6       0       0       0       0       0       0       0       0
   779 ;;      Locals:        10       0       0       0       0       0       0       0       0
   780 ;;      Temps:          2       0       0       0       0       0       0       0       0
   781 ;;      Totals:        18       0       0       0       0       0       0       0       0
   782 ;;Total ram usage:       18 bytes
   783 ;; Hardware stack levels used: 1
   784 ;; Hardware stack levels required when called: 4
   785 ;; This function calls:
   786 ;;		___lldiv
   787 ;;		___llmod
   788 ;;		_putch
   789 ;; This function is called by:
   790 ;;		_main
   791 ;; This function uses a non-reentrant model
   792 ;;
   793                           
   794                           	psect	text1
   795   000AB2                     __ptext1:
   796                           	callstack 0
   797   000AB2                     _printf:
   798                           	callstack 26
   799   000AB2                     
   800                           ;P:\Microchip\pic\sources\c90\common\doprnt.c: 477: printf(const char * f, ...);P:\Micro
      +                          chip\pic\sources\c90\common\doprnt.c: 478: {;P:\Microchip\pic\sources\c90\common\doprnt.
      +                          c: 479:  va_list ap;;P:\Microchip\pic\sources\c90\common\doprnt.c: 512:  char c;;P:\Micr
      +                          ochip\pic\sources\c90\common\doprnt.c: 517:  int prec;;P:\Microchip\pic\sources\c90\comm
      +                          on\doprnt.c: 525:  unsigned char flag;;P:\Microchip\pic\sources\c90\common\doprnt.c: 543
      +                          :  } tmpval;;P:\Microchip\pic\sources\c90\common\doprnt.c: 545:  unsigned long val;
   801   000AB2  0E19               	movlw	low (?_printf+2)
   802   000AB4  6E21               	movwf	printf@ap^0,c
   803   000AB6  0E00               	movlw	high (?_printf+2)
   804   000AB8  6E22               	movwf	(printf@ap+1)^0,c
   805                           
   806                           ;P:\Microchip\pic\sources\c90\common\doprnt.c: 553:  while((c = *f++)) {
   807   000ABA  EF5A  F006         	goto	l1246
   808   000ABE                     l1194:
   809                           
   810                           ;P:\Microchip\pic\sources\c90\common\doprnt.c: 555:   if(c != '%')
   811   000ABE  0E25               	movlw	37
   812   000AC0  1828               	xorwf	printf@c^0,w,c
   813   000AC2  B4D8               	btfsc	status,2,c
   814   000AC4  EF66  F005         	goto	u341
   815   000AC8  EF68  F005         	goto	u340
   816   000ACC                     u341:
   817   000ACC  EF6D  F005         	goto	l1198
   818   000AD0                     u340:
   819   000AD0                     
   820                           ;P:\Microchip\pic\sources\c90\common\doprnt.c: 557:   {;P:\Microchip\pic\sources\c90\com
      +                          mon\doprnt.c: 558:    (putch(c) );
   821   000AD0  5028               	movf	printf@c^0,w,c
   822   000AD2  ECD3  F007         	call	_putch
   823                           
   824                           ;P:\Microchip\pic\sources\c90\common\doprnt.c: 559:    continue;
   825   000AD6  EF5A  F006         	goto	l1246
   826   000ADA                     l1198:
   827                           
   828                           ;P:\Microchip\pic\sources\c90\common\doprnt.c: 565:   flag = 0;
   829   000ADA  0E00               	movlw	0
   830   000ADC  6E23               	movwf	printf@flag^0,c
   831   000ADE  EF72  F005         	goto	l1204
   832   000AE2                     l1200:
   833                           
   834                           ;P:\Microchip\pic\sources\c90\common\doprnt.c: 669:    flag |= 0x10;
   835   000AE2  8823               	bsf	printf@flag^0,4,c
   836   000AE4                     l1204:
   837   000AE4  C017  FFF6         	movff	printf@f,tblptrl
   838   000AE8  C018  FFF7         	movff	printf@f+1,tblptrh
   839   000AEC  4A17               	infsnz	printf@f^0,f,c
   840   000AEE  2A18               	incf	(printf@f+1)^0,f,c
   841   000AF0                     	if	0	;tblptru may be non-zero
   842   000AF0                     	endif
   843   000AF0                     	if	0	;tblptru may be non-zero
   844   000AF0                     	endif
   845   000AF0  0008               	tblrd		*
   846   000AF2  CFF5 F028          	movff	tablat,printf@c
   847   000AF6  5028               	movf	printf@c^0,w,c
   848   000AF8  6E1D               	movwf	??_printf^0,c
   849   000AFA  6A1E               	clrf	(??_printf+1)^0,c
   850                           
   851                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   852                           ; Switch size 1, requested type "simple"
   853                           ; Number of cases is 1, Range of values is 0 to 0
   854                           ; switch strategies available:
   855                           ; Name         Instructions Cycles
   856                           ; simple_byte            4     3 (average)
   857                           ;	Chosen strategy is simple_byte
   858   000AFC  501E               	movf	(??_printf+1)^0,w,c
   859   000AFE  0A00               	xorlw	0	; case 0
   860   000B00  B4D8               	btfsc	status,2,c
   861   000B02  EF85  F005         	goto	l1338
   862   000B06  EF5A  F006         	goto	l1246
   863   000B0A                     l1338:
   864                           
   865                           ; Switch size 1, requested type "simple"
   866                           ; Number of cases is 4, Range of values is 0 to 108
   867                           ; switch strategies available:
   868                           ; Name         Instructions Cycles
   869                           ; simple_byte           13     7 (average)
   870                           ;	Chosen strategy is simple_byte
   871   000B0A  501D               	movf	??_printf^0,w,c
   872   000B0C  0A00               	xorlw	0	; case 0
   873   000B0E  B4D8               	btfsc	status,2,c
   874   000B10  EF6B  F006         	goto	l108
   875   000B14  0A64               	xorlw	100	; case 100
   876   000B16  B4D8               	btfsc	status,2,c
   877   000B18  EF98  F005         	goto	l95
   878   000B1C  0A0D               	xorlw	13	; case 105
   879   000B1E  B4D8               	btfsc	status,2,c
   880   000B20  EF98  F005         	goto	l95
   881   000B24  0A05               	xorlw	5	; case 108
   882   000B26  B4D8               	btfsc	status,2,c
   883   000B28  EF71  F005         	goto	l1200
   884   000B2C  EF5A  F006         	goto	l1246
   885   000B30                     l95:
   886                           
   887                           ;P:\Microchip\pic\sources\c90\common\doprnt.c: 1279:   {;P:\Microchip\pic\sources\c90\co
      +                          mmon\doprnt.c: 1281:    if(flag & 0x10)
   888   000B30  A823               	btfss	printf@flag^0,4,c
   889   000B32  EF9D  F005         	goto	u351
   890   000B36  EF9F  F005         	goto	u350
   891   000B3A                     u351:
   892   000B3A  EFB1  F005         	goto	l1210
   893   000B3E                     u350:
   894   000B3E                     
   895                           ;P:\Microchip\pic\sources\c90\common\doprnt.c: 1282:     val = (unsigned long)(*(long *)
      +                          __va_arg((*(long **)ap), (long)0));
   896   000B3E  C021  FFD9         	movff	printf@ap,fsr2l
   897   000B42  C022  FFDA         	movff	printf@ap+1,fsr2h
   898   000B46  CFDE F024          	movff	postinc2,printf@val
   899   000B4A  CFDE F025          	movff	postinc2,printf@val+1
   900   000B4E  CFDE F026          	movff	postinc2,printf@val+2
   901   000B52  CFDE F027          	movff	postinc2,printf@val+3
   902   000B56  0E04               	movlw	4
   903   000B58  2621               	addwf	printf@ap^0,f,c
   904   000B5A  0E00               	movlw	0
   905   000B5C  2222               	addwfc	(printf@ap+1)^0,f,c
   906   000B5E  EFC2  F005         	goto	l1214
   907   000B62                     l1210:
   908                           
   909                           ;P:\Microchip\pic\sources\c90\common\doprnt.c: 1285:     val = (unsigned long)(*(int *)_
      +                          _va_arg((*(int **)ap), (int)0));
   910   000B62  C021  FFD9         	movff	printf@ap,fsr2l
   911   000B66  C022  FFDA         	movff	printf@ap+1,fsr2h
   912   000B6A  CFDE F024          	movff	postinc2,printf@val
   913   000B6E  CFDD F025          	movff	postdec2,printf@val+1
   914   000B72  0E00               	movlw	0
   915   000B74  BE25               	btfsc	(printf@val+1)^0,7,c
   916   000B76  0EFF               	movlw	-1
   917   000B78  6E26               	movwf	(printf@val+2)^0,c
   918   000B7A  6E27               	movwf	(printf@val+3)^0,c
   919   000B7C  0E02               	movlw	2
   920   000B7E  2621               	addwf	printf@ap^0,f,c
   921   000B80  0E00               	movlw	0
   922   000B82  2222               	addwfc	(printf@ap+1)^0,f,c
   923   000B84                     l1214:
   924                           
   925                           ;P:\Microchip\pic\sources\c90\common\doprnt.c: 1287:    if((long)val < 0) {
   926   000B84  BE27               	btfsc	(printf@val+3)^0,7,c
   927   000B86  EFC9  F005         	goto	u360
   928   000B8A  EFC7  F005         	goto	u361
   929   000B8E                     u361:
   930   000B8E  EFD3  F005         	goto	l1220
   931   000B92                     u360:
   932   000B92                     
   933                           ;P:\Microchip\pic\sources\c90\common\doprnt.c: 1288:     flag |= 0x03;
   934   000B92  0E03               	movlw	3
   935   000B94  1223               	iorwf	printf@flag^0,f,c
   936   000B96                     
   937                           ;P:\Microchip\pic\sources\c90\common\doprnt.c: 1289:     val = -val;
   938   000B96  1E27               	comf	(printf@val+3)^0,f,c
   939   000B98  1E26               	comf	(printf@val+2)^0,f,c
   940   000B9A  1E25               	comf	(printf@val+1)^0,f,c
   941   000B9C  6C24               	negf	printf@val^0,c
   942   000B9E  0E00               	movlw	0
   943   000BA0  2225               	addwfc	(printf@val+1)^0,f,c
   944   000BA2  2226               	addwfc	(printf@val+2)^0,f,c
   945   000BA4  2227               	addwfc	(printf@val+3)^0,f,c
   946   000BA6                     l1220:
   947                           
   948                           ;P:\Microchip\pic\sources\c90\common\doprnt.c: 1292:   };P:\Microchip\pic\sources\c90\co
      +                          mmon\doprnt.c: 1331:    for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
   949   000BA6  0E01               	movlw	1
   950   000BA8  6E28               	movwf	printf@c^0,c
   951   000BAA                     l1226:
   952                           
   953                           ;P:\Microchip\pic\sources\c90\common\doprnt.c: 1332:     if(val < dpowers[c])
   954   000BAA  5028               	movf	printf@c^0,w,c
   955   000BAC  0D04               	mullw	4
   956   000BAE  0E01               	movlw	low _dpowers
   957   000BB0  24F3               	addwf	243,w,c
   958   000BB2  6EF6               	movwf	tblptrl,c
   959   000BB4  0E08               	movlw	high _dpowers
   960   000BB6  20F4               	addwfc	244,w,c
   961   000BB8  6EF7               	movwf	tblptrh,c
   962   000BBA                     	if	0	;There are less than 3 active tblptr bytes
   963   000BBA                     	endif
   964   000BBA  0009               	tblrd		*+
   965   000BBC  50F5               	movf	tablat,w,c
   966   000BBE  5C24               	subwf	printf@val^0,w,c
   967   000BC0  0009               	tblrd		*+
   968   000BC2  50F5               	movf	tablat,w,c
   969   000BC4  5825               	subwfb	(printf@val+1)^0,w,c
   970   000BC6  0009               	tblrd		*+
   971   000BC8  50F5               	movf	tablat,w,c
   972   000BCA  5826               	subwfb	(printf@val+2)^0,w,c
   973   000BCC  0009               	tblrd		*+
   974   000BCE  50F5               	movf	tablat,w,c
   975   000BD0  5827               	subwfb	(printf@val+3)^0,w,c
   976   000BD2  B0D8               	btfsc	status,0,c
   977   000BD4  EFEE  F005         	goto	u371
   978   000BD8  EFF0  F005         	goto	u370
   979   000BDC                     u371:
   980   000BDC  EFF2  F005         	goto	l1230
   981   000BE0                     u370:
   982   000BE0  EFFC  F005         	goto	l1234
   983   000BE4                     l1230:
   984   000BE4  2A28               	incf	printf@c^0,f,c
   985   000BE6  0E0A               	movlw	10
   986   000BE8  1828               	xorwf	printf@c^0,w,c
   987   000BEA  A4D8               	btfss	status,2,c
   988   000BEC  EFFA  F005         	goto	u381
   989   000BF0  EFFC  F005         	goto	u380
   990   000BF4                     u381:
   991   000BF4  EFD5  F005         	goto	l1226
   992   000BF8                     u380:
   993   000BF8                     l1234:
   994                           
   995                           ;P:\Microchip\pic\sources\c90\common\doprnt.c: 1448:   {;P:\Microchip\pic\sources\c90\co
      +                          mmon\doprnt.c: 1464:    if(flag & 0x03)
   996   000BF8  C023  F01D         	movff	printf@flag,??_printf
   997   000BFC  0E03               	movlw	3
   998   000BFE  161D               	andwf	??_printf^0,f,c
   999   000C00  B4D8               	btfsc	status,2,c
  1000   000C02  EF05  F006         	goto	u391
  1001   000C06  EF07  F006         	goto	u390
  1002   000C0A                     u391:
  1003   000C0A  EF0A  F006         	goto	l1238
  1004   000C0E                     u390:
  1005   000C0E                     
  1006                           ;P:\Microchip\pic\sources\c90\common\doprnt.c: 1465:     (putch('-') );
  1007   000C0E  0E2D               	movlw	45
  1008   000C10  ECD3  F007         	call	_putch
  1009   000C14                     l1238:
  1010                           
  1011                           ;P:\Microchip\pic\sources\c90\common\doprnt.c: 1495:   };P:\Microchip\pic\sources\c90\co
      +                          mmon\doprnt.c: 1498:   prec = c;
  1012   000C14  C028  F01F         	movff	printf@c,printf@prec
  1013   000C18  6A20               	clrf	(printf@prec+1)^0,c
  1014                           
  1015                           ;P:\Microchip\pic\sources\c90\common\doprnt.c: 1500:   while(prec--) {
  1016   000C1A  EF4D  F006         	goto	l1244
  1017   000C1E                     l1240:
  1018                           
  1019                           ;P:\Microchip\pic\sources\c90\common\doprnt.c: 1504:    {;P:\Microchip\pic\sources\c90\c
      +                          ommon\doprnt.c: 1515:     c = (val / dpowers[(unsigned int)prec]) % 10 + '0';
  1020   000C1E  C01F  F01D         	movff	printf@prec,??_printf
  1021   000C22  C020  F01E         	movff	printf@prec+1,??_printf+1
  1022   000C26  90D8               	bcf	status,0,c
  1023   000C28  361D               	rlcf	??_printf^0,f,c
  1024   000C2A  361E               	rlcf	(??_printf+1)^0,f,c
  1025   000C2C  90D8               	bcf	status,0,c
  1026   000C2E  361D               	rlcf	??_printf^0,f,c
  1027   000C30  361E               	rlcf	(??_printf+1)^0,f,c
  1028   000C32  0E01               	movlw	low _dpowers
  1029   000C34  241D               	addwf	??_printf^0,w,c
  1030   000C36  6EF6               	movwf	tblptrl,c
  1031   000C38  0E08               	movlw	high _dpowers
  1032   000C3A  201E               	addwfc	(??_printf+1)^0,w,c
  1033   000C3C  6EF7               	movwf	tblptrh,c
  1034   000C3E                     	if	0	;There are less than 3 active tblptr bytes
  1035   000C3E                     	endif
  1036   000C3E  0009               	tblrd		*+
  1037   000C40  CFF5 F005          	movff	tablat,___lldiv@divisor
  1038   000C44  0009               	tblrd		*+
  1039   000C46  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  1040   000C4A  0009               	tblrd		*+
  1041   000C4C  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  1042   000C50  000A               	tblrd		*-
  1043   000C52  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  1044   000C56  C024  F001         	movff	printf@val,___lldiv@dividend
  1045   000C5A  C025  F002         	movff	printf@val+1,___lldiv@dividend+1
  1046   000C5E  C026  F003         	movff	printf@val+2,___lldiv@dividend+2
  1047   000C62  C027  F004         	movff	printf@val+3,___lldiv@dividend+3
  1048   000C66  EC6C  F006         	call	___lldiv	;wreg free
  1049   000C6A  C001  F00E         	movff	?___lldiv,___llmod@dividend
  1050   000C6E  C002  F00F         	movff	?___lldiv+1,___llmod@dividend+1
  1051   000C72  C003  F010         	movff	?___lldiv+2,___llmod@dividend+2
  1052   000C76  C004  F011         	movff	?___lldiv+3,___llmod@dividend+3
  1053   000C7A  0E0A               	movlw	10
  1054   000C7C  6E12               	movwf	___llmod@divisor^0,c
  1055   000C7E  0E00               	movlw	0
  1056   000C80  6E13               	movwf	(___llmod@divisor+1)^0,c
  1057   000C82  0E00               	movlw	0
  1058   000C84  6E14               	movwf	(___llmod@divisor+2)^0,c
  1059   000C86  0E00               	movlw	0
  1060   000C88  6E15               	movwf	(___llmod@divisor+3)^0,c
  1061   000C8A  ECBE  F006         	call	___llmod	;wreg free
  1062   000C8E  500E               	movf	?___llmod^0,w,c
  1063   000C90  0F30               	addlw	48
  1064   000C92  6E28               	movwf	printf@c^0,c
  1065   000C94                     
  1066                           ;P:\Microchip\pic\sources\c90\common\doprnt.c: 1549:    };P:\Microchip\pic\sources\c90\c
      +                          ommon\doprnt.c: 1550:    (putch(c) );
  1067   000C94  5028               	movf	printf@c^0,w,c
  1068   000C96  ECD3  F007         	call	_putch
  1069   000C9A                     l1244:
  1070                           
  1071                           ;P:\Microchip\pic\sources\c90\common\doprnt.c: 1500:   while(prec--) {
  1072   000C9A  061F               	decf	printf@prec^0,f,c
  1073   000C9C  A0D8               	btfss	status,0,c
  1074   000C9E  0620               	decf	(printf@prec+1)^0,f,c
  1075   000CA0  281F               	incf	printf@prec^0,w,c
  1076   000CA2  E106               	bnz	u401
  1077   000CA4  2820               	incf	(printf@prec+1)^0,w,c
  1078   000CA6  A4D8               	btfss	status,2,c
  1079   000CA8  EF58  F006         	goto	u401
  1080   000CAC  EF5A  F006         	goto	u400
  1081   000CB0                     u401:
  1082   000CB0  EF0F  F006         	goto	l1240
  1083   000CB4                     u400:
  1084   000CB4                     l1246:
  1085                           
  1086                           ;P:\Microchip\pic\sources\c90\common\doprnt.c: 553:  while((c = *f++)) {
  1087   000CB4  C017  FFF6         	movff	printf@f,tblptrl
  1088   000CB8  C018  FFF7         	movff	printf@f+1,tblptrh
  1089   000CBC  4A17               	infsnz	printf@f^0,f,c
  1090   000CBE  2A18               	incf	(printf@f+1)^0,f,c
  1091   000CC0                     	if	0	;tblptru may be non-zero
  1092   000CC0                     	endif
  1093   000CC0                     	if	0	;tblptru may be non-zero
  1094   000CC0                     	endif
  1095   000CC0  0008               	tblrd		*
  1096   000CC2  CFF5 F028          	movff	tablat,printf@c
  1097   000CC6  5028               	movf	printf@c^0,w,c
  1098   000CC8  A4D8               	btfss	status,2,c
  1099   000CCA  EF69  F006         	goto	u411
  1100   000CCE  EF6B  F006         	goto	u410
  1101   000CD2                     u411:
  1102   000CD2  EF5F  F005         	goto	l1194
  1103   000CD6                     u410:
  1104   000CD6                     l108:
  1105   000CD6  0012               	return		;funcret
  1106   000CD8                     __end_of_printf:
  1107                           	callstack 0
  1108                           
  1109 ;; *************** function _putch *****************
  1110 ;; Defined at:
  1111 ;;		line 64 in file "main.c"
  1112 ;; Parameters:    Size  Location     Type
  1113 ;;  data            1    wreg     unsigned char 
  1114 ;; Auto vars:     Size  Location     Type
  1115 ;;  data            1    5[COMRAM] unsigned char 
  1116 ;; Return value:  Size  Location     Type
  1117 ;;                  1    wreg      void 
  1118 ;; Registers used:
  1119 ;;		wreg, status,2, status,0, cstack
  1120 ;; Tracked objects:
  1121 ;;		On entry : 0/0
  1122 ;;		On exit  : 0/0
  1123 ;;		Unchanged: 0/0
  1124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1125 ;;      Params:         0       0       0       0       0       0       0       0       0
  1126 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1127 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1128 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1129 ;;Total ram usage:        1 bytes
  1130 ;; Hardware stack levels used: 1
  1131 ;; Hardware stack levels required when called: 3
  1132 ;; This function calls:
  1133 ;;		_escreve_lcd
  1134 ;; This function is called by:
  1135 ;;		_printf
  1136 ;; This function uses a non-reentrant model
  1137 ;;
  1138                           
  1139                           	psect	text2
  1140   000FA6                     __ptext2:
  1141                           	callstack 0
  1142   000FA6                     _putch:
  1143                           	callstack 26
  1144                           
  1145                           ;incstack = 0
  1146                           ;putch@data stored from wreg
  1147   000FA6  6E06               	movwf	putch@data^0,c
  1148   000FA8                     
  1149                           ;main.c: 65:   escreve_lcd(data);
  1150   000FA8  5006               	movf	putch@data^0,w,c
  1151   000FAA  ECC7  F007         	call	_escreve_lcd
  1152   000FAE  0012               	return		;funcret
  1153   000FB0                     __end_of_putch:
  1154                           	callstack 0
  1155                           
  1156 ;; *************** function _escreve_lcd *****************
  1157 ;; Defined at:
  1158 ;;		line 33 in file "lcd.c"
  1159 ;; Parameters:    Size  Location     Type
  1160 ;;  c               1    wreg     unsigned char 
  1161 ;; Auto vars:     Size  Location     Type
  1162 ;;  c               1    4[COMRAM] unsigned char 
  1163 ;; Return value:  Size  Location     Type
  1164 ;;                  1    wreg      void 
  1165 ;; Registers used:
  1166 ;;		wreg, status,2, status,0, cstack
  1167 ;; Tracked objects:
  1168 ;;		On entry : 0/0
  1169 ;;		On exit  : 0/0
  1170 ;;		Unchanged: 0/0
  1171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1172 ;;      Params:         0       0       0       0       0       0       0       0       0
  1173 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1174 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1175 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1176 ;;Total ram usage:        1 bytes
  1177 ;; Hardware stack levels used: 1
  1178 ;; Hardware stack levels required when called: 2
  1179 ;; This function calls:
  1180 ;;		_envia_byte_lcd
  1181 ;; This function is called by:
  1182 ;;		_putch
  1183 ;; This function uses a non-reentrant model
  1184 ;;
  1185                           
  1186                           	psect	text3
  1187   000F8E                     __ptext3:
  1188                           	callstack 0
  1189   000F8E                     _escreve_lcd:
  1190                           	callstack 26
  1191                           
  1192                           ;incstack = 0
  1193                           ;escreve_lcd@c stored from wreg
  1194   000F8E  6E05               	movwf	escreve_lcd@c^0,c
  1195   000F90  C005  F003         	movff	escreve_lcd@c,envia_byte_lcd@dado
  1196   000F94  0E01               	movlw	1
  1197   000F96  ECA8  F007         	call	_envia_byte_lcd
  1198   000F9A  0012               	return		;funcret
  1199   000F9C                     __end_of_escreve_lcd:
  1200                           	callstack 0
  1201                           
  1202 ;; *************** function ___llmod *****************
  1203 ;; Defined at:
  1204 ;;		line 7 in file "P:\Microchip\pic\sources\c90\common\llmod.c"
  1205 ;; Parameters:    Size  Location     Type
  1206 ;;  dividend        4   13[COMRAM] unsigned long 
  1207 ;;  divisor         4   17[COMRAM] unsigned long 
  1208 ;; Auto vars:     Size  Location     Type
  1209 ;;  counter         1   21[COMRAM] unsigned char 
  1210 ;; Return value:  Size  Location     Type
  1211 ;;                  4   13[COMRAM] unsigned long 
  1212 ;; Registers used:
  1213 ;;		wreg, status,2, status,0
  1214 ;; Tracked objects:
  1215 ;;		On entry : 0/0
  1216 ;;		On exit  : 0/0
  1217 ;;		Unchanged: 0/0
  1218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1219 ;;      Params:         8       0       0       0       0       0       0       0       0
  1220 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1221 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1222 ;;      Totals:         9       0       0       0       0       0       0       0       0
  1223 ;;Total ram usage:        9 bytes
  1224 ;; Hardware stack levels used: 1
  1225 ;; This function calls:
  1226 ;;		Nothing
  1227 ;; This function is called by:
  1228 ;;		_printf
  1229 ;; This function uses a non-reentrant model
  1230 ;;
  1231                           
  1232                           	psect	text4
  1233   000D7C                     __ptext4:
  1234                           	callstack 0
  1235   000D7C                     ___llmod:
  1236                           	callstack 29
  1237   000D7C  5012               	movf	___llmod@divisor^0,w,c
  1238   000D7E  1013               	iorwf	(___llmod@divisor+1)^0,w,c
  1239   000D80  1014               	iorwf	(___llmod@divisor+2)^0,w,c
  1240   000D82  1015               	iorwf	(___llmod@divisor+3)^0,w,c
  1241   000D84  B4D8               	btfsc	status,2,c
  1242   000D86  EFC7  F006         	goto	u291
  1243   000D8A  EFC9  F006         	goto	u290
  1244   000D8E                     u291:
  1245   000D8E  EFF9  F006         	goto	l519
  1246   000D92                     u290:
  1247   000D92  0E01               	movlw	1
  1248   000D94  6E16               	movwf	___llmod@counter^0,c
  1249   000D96  EFD3  F006         	goto	l1142
  1250   000D9A                     l1140:
  1251   000D9A  90D8               	bcf	status,0,c
  1252   000D9C  3612               	rlcf	___llmod@divisor^0,f,c
  1253   000D9E  3613               	rlcf	(___llmod@divisor+1)^0,f,c
  1254   000DA0  3614               	rlcf	(___llmod@divisor+2)^0,f,c
  1255   000DA2  3615               	rlcf	(___llmod@divisor+3)^0,f,c
  1256   000DA4  2A16               	incf	___llmod@counter^0,f,c
  1257   000DA6                     l1142:
  1258   000DA6  AE15               	btfss	(___llmod@divisor+3)^0,7,c
  1259   000DA8  EFD8  F006         	goto	u301
  1260   000DAC  EFDA  F006         	goto	u300
  1261   000DB0                     u301:
  1262   000DB0  EFCD  F006         	goto	l1140
  1263   000DB4                     u300:
  1264   000DB4                     l1144:
  1265   000DB4  5012               	movf	___llmod@divisor^0,w,c
  1266   000DB6  5C0E               	subwf	___llmod@dividend^0,w,c
  1267   000DB8  5013               	movf	(___llmod@divisor+1)^0,w,c
  1268   000DBA  580F               	subwfb	(___llmod@dividend+1)^0,w,c
  1269   000DBC  5014               	movf	(___llmod@divisor+2)^0,w,c
  1270   000DBE  5810               	subwfb	(___llmod@dividend+2)^0,w,c
  1271   000DC0  5015               	movf	(___llmod@divisor+3)^0,w,c
  1272   000DC2  5811               	subwfb	(___llmod@dividend+3)^0,w,c
  1273   000DC4  A0D8               	btfss	status,0,c
  1274   000DC6  EFE7  F006         	goto	u311
  1275   000DCA  EFE9  F006         	goto	u310
  1276   000DCE                     u311:
  1277   000DCE  EFF1  F006         	goto	l1148
  1278   000DD2                     u310:
  1279   000DD2  5012               	movf	___llmod@divisor^0,w,c
  1280   000DD4  5E0E               	subwf	___llmod@dividend^0,f,c
  1281   000DD6  5013               	movf	(___llmod@divisor+1)^0,w,c
  1282   000DD8  5A0F               	subwfb	(___llmod@dividend+1)^0,f,c
  1283   000DDA  5014               	movf	(___llmod@divisor+2)^0,w,c
  1284   000DDC  5A10               	subwfb	(___llmod@dividend+2)^0,f,c
  1285   000DDE  5015               	movf	(___llmod@divisor+3)^0,w,c
  1286   000DE0  5A11               	subwfb	(___llmod@dividend+3)^0,f,c
  1287   000DE2                     l1148:
  1288   000DE2  90D8               	bcf	status,0,c
  1289   000DE4  3215               	rrcf	(___llmod@divisor+3)^0,f,c
  1290   000DE6  3214               	rrcf	(___llmod@divisor+2)^0,f,c
  1291   000DE8  3213               	rrcf	(___llmod@divisor+1)^0,f,c
  1292   000DEA  3212               	rrcf	___llmod@divisor^0,f,c
  1293   000DEC  2E16               	decfsz	___llmod@counter^0,f,c
  1294   000DEE  EFDA  F006         	goto	l1144
  1295   000DF2                     l519:
  1296   000DF2  C00E  F00E         	movff	___llmod@dividend,?___llmod
  1297   000DF6  C00F  F00F         	movff	___llmod@dividend+1,?___llmod+1
  1298   000DFA  C010  F010         	movff	___llmod@dividend+2,?___llmod+2
  1299   000DFE  C011  F011         	movff	___llmod@dividend+3,?___llmod+3
  1300   000E02  0012               	return		;funcret
  1301   000E04                     __end_of___llmod:
  1302                           	callstack 0
  1303                           
  1304 ;; *************** function ___lldiv *****************
  1305 ;; Defined at:
  1306 ;;		line 7 in file "P:\Microchip\pic\sources\c90\common\__lldiv.c"
  1307 ;; Parameters:    Size  Location     Type
  1308 ;;  dividend        4    0[COMRAM] unsigned long 
  1309 ;;  divisor         4    4[COMRAM] unsigned long 
  1310 ;; Auto vars:     Size  Location     Type
  1311 ;;  quotient        4    8[COMRAM] unsigned long 
  1312 ;;  counter         1   12[COMRAM] unsigned char 
  1313 ;; Return value:  Size  Location     Type
  1314 ;;                  4    0[COMRAM] unsigned long 
  1315 ;; Registers used:
  1316 ;;		wreg, status,2, status,0
  1317 ;; Tracked objects:
  1318 ;;		On entry : 0/0
  1319 ;;		On exit  : 0/0
  1320 ;;		Unchanged: 0/0
  1321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1322 ;;      Params:         8       0       0       0       0       0       0       0       0
  1323 ;;      Locals:         5       0       0       0       0       0       0       0       0
  1324 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1325 ;;      Totals:        13       0       0       0       0       0       0       0       0
  1326 ;;Total ram usage:       13 bytes
  1327 ;; Hardware stack levels used: 1
  1328 ;; This function calls:
  1329 ;;		Nothing
  1330 ;; This function is called by:
  1331 ;;		_printf
  1332 ;; This function uses a non-reentrant model
  1333 ;;
  1334                           
  1335                           	psect	text5
  1336   000CD8                     __ptext5:
  1337                           	callstack 0
  1338   000CD8                     ___lldiv:
  1339                           	callstack 29
  1340   000CD8  0E00               	movlw	0
  1341   000CDA  6E09               	movwf	___lldiv@quotient^0,c
  1342   000CDC  0E00               	movlw	0
  1343   000CDE  6E0A               	movwf	(___lldiv@quotient+1)^0,c
  1344   000CE0  0E00               	movlw	0
  1345   000CE2  6E0B               	movwf	(___lldiv@quotient+2)^0,c
  1346   000CE4  0E00               	movlw	0
  1347   000CE6  6E0C               	movwf	(___lldiv@quotient+3)^0,c
  1348   000CE8  5005               	movf	___lldiv@divisor^0,w,c
  1349   000CEA  1006               	iorwf	(___lldiv@divisor+1)^0,w,c
  1350   000CEC  1007               	iorwf	(___lldiv@divisor+2)^0,w,c
  1351   000CEE  1008               	iorwf	(___lldiv@divisor+3)^0,w,c
  1352   000CF0  B4D8               	btfsc	status,2,c
  1353   000CF2  EF7D  F006         	goto	u261
  1354   000CF6  EF7F  F006         	goto	u260
  1355   000CFA                     u261:
  1356   000CFA  EFB5  F006         	goto	l138
  1357   000CFE                     u260:
  1358   000CFE  0E01               	movlw	1
  1359   000D00  6E0D               	movwf	___lldiv@counter^0,c
  1360   000D02  EF89  F006         	goto	l1122
  1361   000D06                     l1120:
  1362   000D06  90D8               	bcf	status,0,c
  1363   000D08  3605               	rlcf	___lldiv@divisor^0,f,c
  1364   000D0A  3606               	rlcf	(___lldiv@divisor+1)^0,f,c
  1365   000D0C  3607               	rlcf	(___lldiv@divisor+2)^0,f,c
  1366   000D0E  3608               	rlcf	(___lldiv@divisor+3)^0,f,c
  1367   000D10  2A0D               	incf	___lldiv@counter^0,f,c
  1368   000D12                     l1122:
  1369   000D12  AE08               	btfss	(___lldiv@divisor+3)^0,7,c
  1370   000D14  EF8E  F006         	goto	u271
  1371   000D18  EF90  F006         	goto	u270
  1372   000D1C                     u271:
  1373   000D1C  EF83  F006         	goto	l1120
  1374   000D20                     u270:
  1375   000D20                     l1124:
  1376   000D20  90D8               	bcf	status,0,c
  1377   000D22  3609               	rlcf	___lldiv@quotient^0,f,c
  1378   000D24  360A               	rlcf	(___lldiv@quotient+1)^0,f,c
  1379   000D26  360B               	rlcf	(___lldiv@quotient+2)^0,f,c
  1380   000D28  360C               	rlcf	(___lldiv@quotient+3)^0,f,c
  1381   000D2A  5005               	movf	___lldiv@divisor^0,w,c
  1382   000D2C  5C01               	subwf	___lldiv@dividend^0,w,c
  1383   000D2E  5006               	movf	(___lldiv@divisor+1)^0,w,c
  1384   000D30  5802               	subwfb	(___lldiv@dividend+1)^0,w,c
  1385   000D32  5007               	movf	(___lldiv@divisor+2)^0,w,c
  1386   000D34  5803               	subwfb	(___lldiv@dividend+2)^0,w,c
  1387   000D36  5008               	movf	(___lldiv@divisor+3)^0,w,c
  1388   000D38  5804               	subwfb	(___lldiv@dividend+3)^0,w,c
  1389   000D3A  A0D8               	btfss	status,0,c
  1390   000D3C  EFA2  F006         	goto	u281
  1391   000D40  EFA4  F006         	goto	u280
  1392   000D44                     u281:
  1393   000D44  EFAD  F006         	goto	l1132
  1394   000D48                     u280:
  1395   000D48  5005               	movf	___lldiv@divisor^0,w,c
  1396   000D4A  5E01               	subwf	___lldiv@dividend^0,f,c
  1397   000D4C  5006               	movf	(___lldiv@divisor+1)^0,w,c
  1398   000D4E  5A02               	subwfb	(___lldiv@dividend+1)^0,f,c
  1399   000D50  5007               	movf	(___lldiv@divisor+2)^0,w,c
  1400   000D52  5A03               	subwfb	(___lldiv@dividend+2)^0,f,c
  1401   000D54  5008               	movf	(___lldiv@divisor+3)^0,w,c
  1402   000D56  5A04               	subwfb	(___lldiv@dividend+3)^0,f,c
  1403   000D58  8009               	bsf	___lldiv@quotient^0,0,c
  1404   000D5A                     l1132:
  1405   000D5A  90D8               	bcf	status,0,c
  1406   000D5C  3208               	rrcf	(___lldiv@divisor+3)^0,f,c
  1407   000D5E  3207               	rrcf	(___lldiv@divisor+2)^0,f,c
  1408   000D60  3206               	rrcf	(___lldiv@divisor+1)^0,f,c
  1409   000D62  3205               	rrcf	___lldiv@divisor^0,f,c
  1410   000D64  2E0D               	decfsz	___lldiv@counter^0,f,c
  1411   000D66  EF90  F006         	goto	l1124
  1412   000D6A                     l138:
  1413   000D6A  C009  F001         	movff	___lldiv@quotient,?___lldiv
  1414   000D6E  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  1415   000D72  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  1416   000D76  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  1417   000D7A  0012               	return		;funcret
  1418   000D7C                     __end_of___lldiv:
  1419                           	callstack 0
  1420                           
  1421 ;; *************** function _limpa_lcd *****************
  1422 ;; Defined at:
  1423 ;;		line 36 in file "lcd.c"
  1424 ;; Parameters:    Size  Location     Type
  1425 ;;		None
  1426 ;; Auto vars:     Size  Location     Type
  1427 ;;		None
  1428 ;; Return value:  Size  Location     Type
  1429 ;;                  1    wreg      void 
  1430 ;; Registers used:
  1431 ;;		wreg, status,2, status,0, cstack
  1432 ;; Tracked objects:
  1433 ;;		On entry : 0/0
  1434 ;;		On exit  : 0/0
  1435 ;;		Unchanged: 0/0
  1436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1437 ;;      Params:         0       0       0       0       0       0       0       0       0
  1438 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1439 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1440 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1441 ;;Total ram usage:        1 bytes
  1442 ;; Hardware stack levels used: 1
  1443 ;; Hardware stack levels required when called: 2
  1444 ;; This function calls:
  1445 ;;		_envia_byte_lcd
  1446 ;; This function is called by:
  1447 ;;		_main
  1448 ;; This function uses a non-reentrant model
  1449 ;;
  1450                           
  1451                           	psect	text6
  1452   000F74                     __ptext6:
  1453                           	callstack 0
  1454   000F74                     _limpa_lcd:
  1455                           	callstack 28
  1456   000F74                     
  1457                           ;lcd.c: 38:   envia_byte_lcd(0,0x01);
  1458   000F74  0E01               	movlw	1
  1459   000F76  6E03               	movwf	envia_byte_lcd@dado^0,c
  1460   000F78  0E00               	movlw	0
  1461   000F7A  ECA8  F007         	call	_envia_byte_lcd
  1462   000F7E                     
  1463                           ;lcd.c: 39:   _delay((unsigned long)((2)*(4000000/4000.0)));
  1464   000F7E  0E03               	movlw	3
  1465   000F80  6E05               	movwf	??_limpa_lcd^0,c
  1466   000F82  0E98               	movlw	152
  1467   000F84                     u527:
  1468   000F84  2EE8               	decfsz	wreg,f,c
  1469   000F86  D7FE               	bra	u527
  1470   000F88  2E05               	decfsz	??_limpa_lcd^0,f,c
  1471   000F8A  D7FC               	bra	u527
  1472   000F8C  0012               	return		;funcret
  1473   000F8E                     __end_of_limpa_lcd:
  1474                           	callstack 0
  1475                           
  1476 ;; *************** function _inicializa_lcd *****************
  1477 ;; Defined at:
  1478 ;;		line 43 in file "lcd.c"
  1479 ;; Parameters:    Size  Location     Type
  1480 ;;		None
  1481 ;; Auto vars:     Size  Location     Type
  1482 ;;		None
  1483 ;; Return value:  Size  Location     Type
  1484 ;;                  1    wreg      void 
  1485 ;; Registers used:
  1486 ;;		wreg, status,2, status,0, cstack
  1487 ;; Tracked objects:
  1488 ;;		On entry : 0/0
  1489 ;;		On exit  : 0/0
  1490 ;;		Unchanged: 0/0
  1491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1492 ;;      Params:         0       0       0       0       0       0       0       0       0
  1493 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1494 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1495 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1496 ;;Total ram usage:        1 bytes
  1497 ;; Hardware stack levels used: 1
  1498 ;; Hardware stack levels required when called: 2
  1499 ;; This function calls:
  1500 ;;		_envia_byte_lcd
  1501 ;;		_envia_nibble_lcd
  1502 ;; This function is called by:
  1503 ;;		_main
  1504 ;; This function uses a non-reentrant model
  1505 ;;
  1506                           
  1507                           	psect	text7
  1508   000E8C                     __ptext7:
  1509                           	callstack 0
  1510   000E8C                     _inicializa_lcd:
  1511                           	callstack 28
  1512   000E8C                     
  1513                           ;lcd.c: 45:  PORTDbits.RD1 = 0;
  1514   000E8C  9283               	bcf	131,1,c	;volatile
  1515                           
  1516                           ;lcd.c: 46:  PORTDbits.RD4 = 0;
  1517   000E8E  9883               	bcf	131,4,c	;volatile
  1518                           
  1519                           ;lcd.c: 47:  PORTDbits.RD5 = 0;
  1520   000E90  9A83               	bcf	131,5,c	;volatile
  1521                           
  1522                           ;lcd.c: 48:  PORTDbits.RD6 = 0;
  1523   000E92  9C83               	bcf	131,6,c	;volatile
  1524                           
  1525                           ;lcd.c: 49:  PORTDbits.RD7 = 0;
  1526   000E94  9E83               	bcf	131,7,c	;volatile
  1527   000E96                     
  1528                           ;lcd.c: 51:  _delay((unsigned long)((50)*(4000000/4000.0)));
  1529   000E96  0E41               	movlw	65
  1530   000E98  6E05               	movwf	??_inicializa_lcd^0,c
  1531   000E9A  0EEE               	movlw	238
  1532   000E9C                     u537:
  1533   000E9C  2EE8               	decfsz	wreg,f,c
  1534   000E9E  D7FE               	bra	u537
  1535   000EA0  2E05               	decfsz	??_inicializa_lcd^0,f,c
  1536   000EA2  D7FC               	bra	u537
  1537   000EA4  D000               	nop2	
  1538   000EA6                     
  1539                           ;lcd.c: 52:  envia_nibble_lcd(0x03);
  1540   000EA6  0E03               	movlw	3
  1541   000EA8  EC02  F007         	call	_envia_nibble_lcd
  1542   000EAC                     
  1543                           ;lcd.c: 53:  _delay((unsigned long)((4)*(4000000/4000.0)));
  1544   000EAC  0E06               	movlw	6
  1545   000EAE  6E05               	movwf	??_inicializa_lcd^0,c
  1546   000EB0  0E30               	movlw	48
  1547   000EB2                     u547:
  1548   000EB2  2EE8               	decfsz	wreg,f,c
  1549   000EB4  D7FE               	bra	u547
  1550   000EB6  2E05               	decfsz	??_inicializa_lcd^0,f,c
  1551   000EB8  D7FC               	bra	u547
  1552   000EBA  D000               	nop2	
  1553                           
  1554                           ;lcd.c: 54:  envia_nibble_lcd(0x03);
  1555   000EBC  0E03               	movlw	3
  1556   000EBE  EC02  F007         	call	_envia_nibble_lcd
  1557   000EC2                     
  1558                           ;lcd.c: 55:  _delay((unsigned long)((100)*(4000000/4000000.0)));
  1559   000EC2  0E21               	movlw	33
  1560   000EC4                     u557:
  1561   000EC4  2EE8               	decfsz	wreg,f,c
  1562   000EC6  D7FE               	bra	u557
  1563   000EC8  F000               	nop	
  1564   000ECA                     
  1565                           ;lcd.c: 56:  envia_nibble_lcd(0x03);
  1566   000ECA  0E03               	movlw	3
  1567   000ECC  EC02  F007         	call	_envia_nibble_lcd
  1568   000ED0                     
  1569                           ;lcd.c: 58:  envia_nibble_lcd(0x02);
  1570   000ED0  0E02               	movlw	2
  1571   000ED2  EC02  F007         	call	_envia_nibble_lcd
  1572   000ED6                     
  1573                           ;lcd.c: 60:  envia_byte_lcd(0,0x01);
  1574   000ED6  0E01               	movlw	1
  1575   000ED8  6E03               	movwf	envia_byte_lcd@dado^0,c
  1576   000EDA  0E00               	movlw	0
  1577   000EDC  ECA8  F007         	call	_envia_byte_lcd
  1578                           
  1579                           ;lcd.c: 61:  _delay((unsigned long)((2)*(4000000/4000.0)));
  1580   000EE0  0E03               	movlw	3
  1581   000EE2  6E05               	movwf	??_inicializa_lcd^0,c
  1582   000EE4  0E98               	movlw	152
  1583   000EE6                     u567:
  1584   000EE6  2EE8               	decfsz	wreg,f,c
  1585   000EE8  D7FE               	bra	u567
  1586   000EEA  2E05               	decfsz	??_inicializa_lcd^0,f,c
  1587   000EEC  D7FC               	bra	u567
  1588   000EEE                     
  1589                           ;lcd.c: 63:  envia_byte_lcd(0,0x28);
  1590   000EEE  0E28               	movlw	40
  1591   000EF0  6E03               	movwf	envia_byte_lcd@dado^0,c
  1592   000EF2  0E00               	movlw	0
  1593   000EF4  ECA8  F007         	call	_envia_byte_lcd
  1594   000EF8                     
  1595                           ;lcd.c: 65:  envia_byte_lcd(0,0x0c);
  1596   000EF8  0E0C               	movlw	12
  1597   000EFA  6E03               	movwf	envia_byte_lcd@dado^0,c
  1598   000EFC  0E00               	movlw	0
  1599   000EFE  ECA8  F007         	call	_envia_byte_lcd
  1600   000F02                     
  1601                           ;lcd.c: 67:  envia_byte_lcd(0,0x06);
  1602   000F02  0E06               	movlw	6
  1603   000F04  6E03               	movwf	envia_byte_lcd@dado^0,c
  1604   000F06  0E00               	movlw	0
  1605   000F08  ECA8  F007         	call	_envia_byte_lcd
  1606   000F0C  0012               	return		;funcret
  1607   000F0E                     __end_of_inicializa_lcd:
  1608                           	callstack 0
  1609                           
  1610 ;; *************** function _caracter_inicio *****************
  1611 ;; Defined at:
  1612 ;;		line 73 in file "lcd.c"
  1613 ;; Parameters:    Size  Location     Type
  1614 ;;  linha           1    wreg     unsigned char 
  1615 ;;  coluna          1    4[COMRAM] unsigned char 
  1616 ;; Auto vars:     Size  Location     Type
  1617 ;;  linha           1    5[COMRAM] unsigned char 
  1618 ;;  posicao         1    6[COMRAM] unsigned char 
  1619 ;; Return value:  Size  Location     Type
  1620 ;;                  1    wreg      void 
  1621 ;; Registers used:
  1622 ;;		wreg, status,2, status,0, cstack
  1623 ;; Tracked objects:
  1624 ;;		On entry : 0/0
  1625 ;;		On exit  : 0/0
  1626 ;;		Unchanged: 0/0
  1627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1628 ;;      Params:         1       0       0       0       0       0       0       0       0
  1629 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1630 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1631 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1632 ;;Total ram usage:        3 bytes
  1633 ;; Hardware stack levels used: 1
  1634 ;; Hardware stack levels required when called: 2
  1635 ;; This function calls:
  1636 ;;		_envia_byte_lcd
  1637 ;; This function is called by:
  1638 ;;		_main
  1639 ;; This function uses a non-reentrant model
  1640 ;;
  1641                           
  1642                           	psect	text8
  1643   000F0E                     __ptext8:
  1644                           	callstack 0
  1645   000F0E                     _caracter_inicio:
  1646                           	callstack 28
  1647                           
  1648                           ;incstack = 0
  1649                           ;caracter_inicio@linha stored from wreg
  1650   000F0E  6E06               	movwf	caracter_inicio@linha^0,c
  1651   000F10                     
  1652                           ;lcd.c: 73:  void caracter_inicio(char linha,char coluna);lcd.c: 74: {;lcd.c: 75:  char 
      +                          posicao=0;
  1653   000F10  0E00               	movlw	0
  1654   000F12  6E07               	movwf	caracter_inicio@posicao^0,c
  1655   000F14                     
  1656                           ;lcd.c: 76:  if(linha == 1)
  1657   000F14  0406               	decf	caracter_inicio@linha^0,w,c
  1658   000F16  A4D8               	btfss	status,2,c
  1659   000F18  EF90  F007         	goto	u321
  1660   000F1C  EF92  F007         	goto	u320
  1661   000F20                     u321:
  1662   000F20  EF94  F007         	goto	l1184
  1663   000F24                     u320:
  1664   000F24                     
  1665                           ;lcd.c: 77: {;lcd.c: 78:  posicao=0x80;
  1666   000F24  0E80               	movlw	128
  1667   000F26  6E07               	movwf	caracter_inicio@posicao^0,c
  1668   000F28                     l1184:
  1669                           
  1670                           ;lcd.c: 80:  if(linha == 2)
  1671   000F28  0E02               	movlw	2
  1672   000F2A  1806               	xorwf	caracter_inicio@linha^0,w,c
  1673   000F2C  A4D8               	btfss	status,2,c
  1674   000F2E  EF9B  F007         	goto	u331
  1675   000F32  EF9D  F007         	goto	u330
  1676   000F36                     u331:
  1677   000F36  EF9F  F007         	goto	l1188
  1678   000F3A                     u330:
  1679   000F3A                     
  1680                           ;lcd.c: 81: {;lcd.c: 82:  posicao=0xc0;
  1681   000F3A  0EC0               	movlw	192
  1682   000F3C  6E07               	movwf	caracter_inicio@posicao^0,c
  1683   000F3E                     l1188:
  1684                           
  1685                           ;lcd.c: 85: posicao=posicao+coluna;
  1686   000F3E  5007               	movf	caracter_inicio@posicao^0,w,c
  1687   000F40  2405               	addwf	caracter_inicio@coluna^0,w,c
  1688   000F42  6E07               	movwf	caracter_inicio@posicao^0,c
  1689   000F44                     
  1690                           ;lcd.c: 87: envia_byte_lcd(0,posicao);
  1691   000F44  C007  F003         	movff	caracter_inicio@posicao,envia_byte_lcd@dado
  1692   000F48  0E00               	movlw	0
  1693   000F4A  ECA8  F007         	call	_envia_byte_lcd
  1694   000F4E  0012               	return		;funcret
  1695   000F50                     __end_of_caracter_inicio:
  1696                           	callstack 0
  1697                           
  1698 ;; *************** function _envia_byte_lcd *****************
  1699 ;; Defined at:
  1700 ;;		line 22 in file "lcd.c"
  1701 ;; Parameters:    Size  Location     Type
  1702 ;;  endereco        1    wreg     unsigned char 
  1703 ;;  dado            1    2[COMRAM] unsigned char 
  1704 ;; Auto vars:     Size  Location     Type
  1705 ;;  endereco        1    3[COMRAM] unsigned char 
  1706 ;; Return value:  Size  Location     Type
  1707 ;;                  1    wreg      void 
  1708 ;; Registers used:
  1709 ;;		wreg, status,2, status,0, cstack
  1710 ;; Tracked objects:
  1711 ;;		On entry : 0/0
  1712 ;;		On exit  : 0/0
  1713 ;;		Unchanged: 0/0
  1714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1715 ;;      Params:         1       0       0       0       0       0       0       0       0
  1716 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1717 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1718 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1719 ;;Total ram usage:        2 bytes
  1720 ;; Hardware stack levels used: 1
  1721 ;; Hardware stack levels required when called: 1
  1722 ;; This function calls:
  1723 ;;		_envia_nibble_lcd
  1724 ;; This function is called by:
  1725 ;;		_escreve_lcd
  1726 ;;		_limpa_lcd
  1727 ;;		_inicializa_lcd
  1728 ;;		_caracter_inicio
  1729 ;; This function uses a non-reentrant model
  1730 ;;
  1731                           
  1732                           	psect	text9
  1733   000F50                     __ptext9:
  1734                           	callstack 0
  1735   000F50                     _envia_byte_lcd:
  1736                           	callstack 26
  1737                           
  1738                           ;incstack = 0
  1739                           ;envia_byte_lcd@endereco stored from wreg
  1740   000F50  6E04               	movwf	envia_byte_lcd@endereco^0,c
  1741   000F52                     
  1742                           ;lcd.c: 22: void envia_byte_lcd(char endereco,char dado);lcd.c: 23: {;lcd.c: 24:  PORTDb
      +                          its.RD0 = endereco;
  1743   000F52  B004               	btfsc	envia_byte_lcd@endereco^0,0,c
  1744   000F54  D002               	bra	u255
  1745   000F56  9083               	bcf	131,0,c	;volatile
  1746   000F58  D001               	bra	u256
  1747   000F5A                     u255:
  1748   000F5A  8083               	bsf	131,0,c	;volatile
  1749   000F5C                     u256:
  1750   000F5C                     
  1751                           ;lcd.c: 25:  _delay((unsigned long)((5)*(4000000/4000000.0)));
  1752   000F5C  D000               	nop2		;2 cycle nop
  1753   000F5E  D000               	nop2		;2 cycle nop
  1754   000F60  F000               	nop	
  1755   000F62                     
  1756                           ;lcd.c: 26:  envia_nibble_lcd(dado>>4);
  1757   000F62  3803               	swapf	envia_byte_lcd@dado^0,w,c
  1758   000F64  0B0F               	andlw	15
  1759   000F66  EC02  F007         	call	_envia_nibble_lcd
  1760   000F6A                     
  1761                           ;lcd.c: 27:  envia_nibble_lcd(dado & 0x0f);
  1762   000F6A  5003               	movf	envia_byte_lcd@dado^0,w,c
  1763   000F6C  0B0F               	andlw	15
  1764   000F6E  EC02  F007         	call	_envia_nibble_lcd
  1765   000F72  0012               	return		;funcret
  1766   000F74                     __end_of_envia_byte_lcd:
  1767                           	callstack 0
  1768                           
  1769 ;; *************** function _envia_nibble_lcd *****************
  1770 ;; Defined at:
  1771 ;;		line 4 in file "lcd.c"
  1772 ;; Parameters:    Size  Location     Type
  1773 ;;  dado            1    wreg     unsigned char 
  1774 ;; Auto vars:     Size  Location     Type
  1775 ;;  dado            1    1[COMRAM] unsigned char 
  1776 ;; Return value:  Size  Location     Type
  1777 ;;                  1    wreg      void 
  1778 ;; Registers used:
  1779 ;;		wreg, status,2, status,0
  1780 ;; Tracked objects:
  1781 ;;		On entry : 0/0
  1782 ;;		On exit  : 0/0
  1783 ;;		Unchanged: 0/0
  1784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1785 ;;      Params:         0       0       0       0       0       0       0       0       0
  1786 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1787 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1788 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1789 ;;Total ram usage:        2 bytes
  1790 ;; Hardware stack levels used: 1
  1791 ;; This function calls:
  1792 ;;		Nothing
  1793 ;; This function is called by:
  1794 ;;		_envia_byte_lcd
  1795 ;;		_inicializa_lcd
  1796 ;; This function uses a non-reentrant model
  1797 ;;
  1798                           
  1799                           	psect	text10
  1800   000E04                     __ptext10:
  1801                           	callstack 0
  1802   000E04                     _envia_nibble_lcd:
  1803                           	callstack 26
  1804                           
  1805                           ;incstack = 0
  1806                           ;envia_nibble_lcd@dado stored from wreg
  1807   000E04  6E02               	movwf	envia_nibble_lcd@dado^0,c
  1808   000E06                     
  1809                           ;lcd.c: 4: void envia_nibble_lcd(char dado);lcd.c: 5: {;lcd.c: 6:   PORTDbits.RD1 = 1;
  1810   000E06  8283               	bsf	131,1,c	;volatile
  1811   000E08                     
  1812                           ;lcd.c: 7:   PORTDbits.RD4 = dado & 0x01;
  1813   000E08  C002  F001         	movff	envia_nibble_lcd@dado,??_envia_nibble_lcd
  1814   000E0C  0E01               	movlw	1
  1815   000E0E  1601               	andwf	??_envia_nibble_lcd^0,f,c
  1816   000E10  3A01               	swapf	??_envia_nibble_lcd^0,f,c
  1817   000E12  5083               	movf	131,w,c	;volatile
  1818   000E14  1801               	xorwf	??_envia_nibble_lcd^0,w,c
  1819   000E16  0BEF               	andlw	-17
  1820   000E18  1801               	xorwf	??_envia_nibble_lcd^0,w,c
  1821   000E1A  6E83               	movwf	131,c	;volatile
  1822                           
  1823                           ;lcd.c: 8:   PORTDbits.RD5 = (dado >> 1) & 0x01;
  1824   000E1C  C002  F001         	movff	envia_nibble_lcd@dado,??_envia_nibble_lcd
  1825   000E20  90D8               	bcf	status,0,c
  1826   000E22  3201               	rrcf	??_envia_nibble_lcd^0,f,c
  1827   000E24  0E01               	movlw	1
  1828   000E26  1601               	andwf	??_envia_nibble_lcd^0,f,c
  1829   000E28  3A01               	swapf	??_envia_nibble_lcd^0,f,c
  1830   000E2A  4601               	rlncf	??_envia_nibble_lcd^0,f,c
  1831   000E2C  5083               	movf	131,w,c	;volatile
  1832   000E2E  1801               	xorwf	??_envia_nibble_lcd^0,w,c
  1833   000E30  0BDF               	andlw	-33
  1834   000E32  1801               	xorwf	??_envia_nibble_lcd^0,w,c
  1835   000E34  6E83               	movwf	131,c	;volatile
  1836                           
  1837                           ;lcd.c: 9:   PORTDbits.RD6 = (dado >> 2) & 0x01;
  1838   000E36  C002  F001         	movff	envia_nibble_lcd@dado,??_envia_nibble_lcd
  1839   000E3A  90D8               	bcf	status,0,c
  1840   000E3C  3201               	rrcf	??_envia_nibble_lcd^0,f,c
  1841   000E3E  90D8               	bcf	status,0,c
  1842   000E40  3201               	rrcf	??_envia_nibble_lcd^0,f,c
  1843   000E42  0E01               	movlw	1
  1844   000E44  1601               	andwf	??_envia_nibble_lcd^0,f,c
  1845   000E46  3A01               	swapf	??_envia_nibble_lcd^0,f,c
  1846   000E48  4601               	rlncf	??_envia_nibble_lcd^0,f,c
  1847   000E4A  4601               	rlncf	??_envia_nibble_lcd^0,f,c
  1848   000E4C  5083               	movf	131,w,c	;volatile
  1849   000E4E  1801               	xorwf	??_envia_nibble_lcd^0,w,c
  1850   000E50  0BBF               	andlw	-65
  1851   000E52  1801               	xorwf	??_envia_nibble_lcd^0,w,c
  1852   000E54  6E83               	movwf	131,c	;volatile
  1853                           
  1854                           ;lcd.c: 10:   PORTDbits.RD7 = (dado >> 3) & 0x01;
  1855   000E56  C002  F001         	movff	envia_nibble_lcd@dado,??_envia_nibble_lcd
  1856   000E5A  90D8               	bcf	status,0,c
  1857   000E5C  3201               	rrcf	??_envia_nibble_lcd^0,f,c
  1858   000E5E  90D8               	bcf	status,0,c
  1859   000E60  3201               	rrcf	??_envia_nibble_lcd^0,f,c
  1860   000E62  90D8               	bcf	status,0,c
  1861   000E64  3201               	rrcf	??_envia_nibble_lcd^0,f,c
  1862   000E66  0E01               	movlw	1
  1863   000E68  1601               	andwf	??_envia_nibble_lcd^0,f,c
  1864   000E6A  3201               	rrcf	??_envia_nibble_lcd^0,f,c
  1865   000E6C  3201               	rrcf	??_envia_nibble_lcd^0,f,c
  1866   000E6E  5083               	movf	131,w,c	;volatile
  1867   000E70  1801               	xorwf	??_envia_nibble_lcd^0,w,c
  1868   000E72  0B7F               	andlw	-129
  1869   000E74  1801               	xorwf	??_envia_nibble_lcd^0,w,c
  1870   000E76  6E83               	movwf	131,c	;volatile
  1871   000E78                     
  1872                           ;lcd.c: 13:   _delay((unsigned long)((50)*(4000000/4000000.0)));
  1873   000E78  0E10               	movlw	16
  1874   000E7A                     u577:
  1875   000E7A  2EE8               	decfsz	wreg,f,c
  1876   000E7C  D7FE               	bra	u577
  1877   000E7E  D000               	nop2	
  1878   000E80                     
  1879                           ;lcd.c: 14:   PORTDbits.RD1 = 0;
  1880   000E80  9283               	bcf	131,1,c	;volatile
  1881   000E82                     
  1882                           ;lcd.c: 15:   _delay((unsigned long)((50)*(4000000/4000000.0)));
  1883   000E82  0E10               	movlw	16
  1884   000E84                     u587:
  1885   000E84  2EE8               	decfsz	wreg,f,c
  1886   000E86  D7FE               	bra	u587
  1887   000E88  D000               	nop2	
  1888   000E8A  0012               	return		;funcret
  1889   000E8C                     __end_of_envia_nibble_lcd:
  1890                           	callstack 0
  1891                           
  1892                           	psect	rparam
  1893   000000                     
  1894                           	psect	config
  1895                           
  1896                           ;Config register CONFIG1L @ 0x300000
  1897                           ;	unspecified, using default values
  1898                           ;	PLL Prescaler Selection bits
  1899                           ;	PLLDIV = 0x0, unprogrammed default
  1900                           ;	System Clock Postscaler Selection bits
  1901                           ;	CPUDIV = 0x0, unprogrammed default
  1902                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
  1903                           ;	USBDIV = 0x0, unprogrammed default
  1904   300000                     	org	3145728
  1905   300000  00                 	db	0
  1906                           
  1907                           ;Config register CONFIG1H @ 0x300001
  1908                           ;	Oscillator Selection bits
  1909                           ;	FOSC = XT_XT, XT oscillator (XT)
  1910                           ;	Fail-Safe Clock Monitor Enable bit
  1911                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  1912                           ;	Internal/External Oscillator Switchover bit
  1913                           ;	IESO = OFF, Oscillator Switchover mode disabled
  1914   300001                     	org	3145729
  1915   300001  00                 	db	0
  1916                           
  1917                           ;Config register CONFIG2L @ 0x300002
  1918                           ;	Power-up Timer Enable bit
  1919                           ;	PWRT = OFF, PWRT disabled
  1920                           ;	Brown-out Reset Enable bits
  1921                           ;	BOR = ON, Brown-out Reset enabled in hardware only (SBOREN is disabled)
  1922                           ;	Brown-out Reset Voltage bits
  1923                           ;	BORV = 3, Minimum setting 2.05V
  1924                           ;	USB Voltage Regulator Enable bit
  1925                           ;	VREGEN = OFF, USB voltage regulator disabled
  1926   300002                     	org	3145730
  1927   300002  1F                 	db	31
  1928                           
  1929                           ;Config register CONFIG2H @ 0x300003
  1930                           ;	Watchdog Timer Enable bit
  1931                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  1932                           ;	Watchdog Timer Postscale Select bits
  1933                           ;	WDTPS = 32768, 1:32768
  1934   300003                     	org	3145731
  1935   300003  1E                 	db	30
  1936                           
  1937                           ; Padding undefined space
  1938   300004                     	org	3145732
  1939   300004  FF                 	db	255
  1940                           
  1941                           ;Config register CONFIG3H @ 0x300005
  1942                           ;	CCP2 MUX bit
  1943                           ;	CCP2MX = ON, CCP2 input/output is multiplexed with RC1
  1944                           ;	PORTB A/D Enable bit
  1945                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  1946                           ;	Low-Power Timer 1 Oscillator Enable bit
  1947                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  1948                           ;	MCLR Pin Enable bit
  1949                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  1950   300005                     	org	3145733
  1951   300005  81                 	db	129
  1952                           
  1953                           ;Config register CONFIG4L @ 0x300006
  1954                           ;	Stack Full/Underflow Reset Enable bit
  1955                           ;	STVREN = ON, Stack full/underflow will cause Reset
  1956                           ;	Single-Supply ICSP Enable bit
  1957                           ;	LVP = OFF, Single-Supply ICSP disabled
  1958                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
  1959                           ;	ICPRT = OFF, ICPORT disabled
  1960                           ;	Extended Instruction Set Enable bit
  1961                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  1962                           ;	Background Debugger Enable bit
  1963                           ;	DEBUG = 0x1, unprogrammed default
  1964   300006                     	org	3145734
  1965   300006  81                 	db	129
  1966                           
  1967                           ; Padding undefined space
  1968   300007                     	org	3145735
  1969   300007  FF                 	db	255
  1970                           
  1971                           ;Config register CONFIG5L @ 0x300008
  1972                           ;	Code Protection bit
  1973                           ;	CP0 = OFF, Block 0 (000800-001FFFh) is not code-protected
  1974                           ;	Code Protection bit
  1975                           ;	CP1 = OFF, Block 1 (002000-003FFFh) is not code-protected
  1976                           ;	Code Protection bit
  1977                           ;	CP2 = OFF, Block 2 (004000-005FFFh) is not code-protected
  1978                           ;	Code Protection bit
  1979                           ;	CP3 = OFF, Block 3 (006000-007FFFh) is not code-protected
  1980   300008                     	org	3145736
  1981   300008  0F                 	db	15
  1982                           
  1983                           ;Config register CONFIG5H @ 0x300009
  1984                           ;	Boot Block Code Protection bit
  1985                           ;	CPB = OFF, Boot block (000000-0007FFh) is not code-protected
  1986                           ;	Data EEPROM Code Protection bit
  1987                           ;	CPD = OFF, Data EEPROM is not code-protected
  1988   300009                     	org	3145737
  1989   300009  C0                 	db	192
  1990                           
  1991                           ;Config register CONFIG6L @ 0x30000A
  1992                           ;	Write Protection bit
  1993                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) is not write-protected
  1994                           ;	Write Protection bit
  1995                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) is not write-protected
  1996                           ;	Write Protection bit
  1997                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) is not write-protected
  1998                           ;	Write Protection bit
  1999                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) is not write-protected
  2000   30000A                     	org	3145738
  2001   30000A  0F                 	db	15
  2002                           
  2003                           ;Config register CONFIG6H @ 0x30000B
  2004                           ;	Configuration Register Write Protection bit
  2005                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
  2006                           ;	Boot Block Write Protection bit
  2007                           ;	WRTB = OFF, Boot block (000000-0007FFh) is not write-protected
  2008                           ;	Data EEPROM Write Protection bit
  2009                           ;	WRTD = OFF, Data EEPROM is not write-protected
  2010   30000B                     	org	3145739
  2011   30000B  E0                 	db	224
  2012                           
  2013                           ;Config register CONFIG7L @ 0x30000C
  2014                           ;	Table Read Protection bit
  2015                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) is not protected from table reads executed in ot
      +                          her blocks
  2016                           ;	Table Read Protection bit
  2017                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) is not protected from table reads executed in ot
      +                          her blocks
  2018                           ;	Table Read Protection bit
  2019                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) is not protected from table reads executed in ot
      +                          her blocks
  2020                           ;	Table Read Protection bit
  2021                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) is not protected from table reads executed in ot
      +                          her blocks
  2022   30000C                     	org	3145740
  2023   30000C  0F                 	db	15
  2024                           
  2025                           ;Config register CONFIG7H @ 0x30000D
  2026                           ;	Boot Block Table Read Protection bit
  2027                           ;	EBTRB = OFF, Boot block (000000-0007FFh) is not protected from table reads executed in
      +                           other blocks
  2028   30000D                     	org	3145741
  2029   30000D  40                 	db	64
  2030                           tosu	equ	0xFFF
  2031                           tosh	equ	0xFFE
  2032                           tosl	equ	0xFFD
  2033                           stkptr	equ	0xFFC
  2034                           pclatu	equ	0xFFB
  2035                           pclath	equ	0xFFA
  2036                           pcl	equ	0xFF9
  2037                           tblptru	equ	0xFF8
  2038                           tblptrh	equ	0xFF7
  2039                           tblptrl	equ	0xFF6
  2040                           tablat	equ	0xFF5
  2041                           prodh	equ	0xFF4
  2042                           prodl	equ	0xFF3
  2043                           indf0	equ	0xFEF
  2044                           postinc0	equ	0xFEE
  2045                           postdec0	equ	0xFED
  2046                           preinc0	equ	0xFEC
  2047                           plusw0	equ	0xFEB
  2048                           fsr0h	equ	0xFEA
  2049                           fsr0l	equ	0xFE9
  2050                           wreg	equ	0xFE8
  2051                           indf1	equ	0xFE7
  2052                           postinc1	equ	0xFE6
  2053                           postdec1	equ	0xFE5
  2054                           preinc1	equ	0xFE4
  2055                           plusw1	equ	0xFE3
  2056                           fsr1h	equ	0xFE2
  2057                           fsr1l	equ	0xFE1
  2058                           bsr	equ	0xFE0
  2059                           indf2	equ	0xFDF
  2060                           postinc2	equ	0xFDE
  2061                           postdec2	equ	0xFDD
  2062                           preinc2	equ	0xFDC
  2063                           plusw2	equ	0xFDB
  2064                           fsr2h	equ	0xFDA
  2065                           fsr2l	equ	0xFD9
  2066                           status	equ	0xFD8

Data Sizes:
    Strings     79
    Constant    40
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     60      60
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_8(CODE[11]), STR_7(CODE[12]), STR_6(CODE[15]), STR_5(CODE[15]), 
		 -> STR_4(CODE[15]), STR_3(CODE[11]), STR_2(CODE[11]), STR_1(CODE[12]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->___llmod
    _putch->_escreve_lcd
    _escreve_lcd->_envia_byte_lcd
    ___llmod->___lldiv
    _limpa_lcd->_envia_byte_lcd
    _inicializa_lcd->_envia_byte_lcd
    _caracter_inicio->_envia_byte_lcd
    _envia_byte_lcd->_envia_nibble_lcd

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                20    20      0    5139
                                             40 COMRAM    20    20      0
                    _caracter_inicio
                     _inicializa_lcd
                          _limpa_lcd
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              27    21      6    2368
                                             22 COMRAM    18    12      6
                            ___lldiv
                            ___llmod
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0     702
                                              5 COMRAM     1     1      0
                        _escreve_lcd
 ---------------------------------------------------------------------------------
 (3) _escreve_lcd                                          1     1      0     680
                                              4 COMRAM     1     1      0
                     _envia_byte_lcd
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     311
                                             13 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     314
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _limpa_lcd                                            1     1      0     658
                                              4 COMRAM     1     1      0
                     _envia_byte_lcd
 ---------------------------------------------------------------------------------
 (1) _inicializa_lcd                                       1     1      0     718
                                              4 COMRAM     1     1      0
                     _envia_byte_lcd
                   _envia_nibble_lcd
 ---------------------------------------------------------------------------------
 (1) _caracter_inicio                                      3     2      1    1228
                                              4 COMRAM     3     2      1
                     _envia_byte_lcd
 ---------------------------------------------------------------------------------
 (4) _envia_byte_lcd                                       2     1      1     658
                                              2 COMRAM     2     1      1
                   _envia_nibble_lcd
 ---------------------------------------------------------------------------------
 (5) _envia_nibble_lcd                                     2     2      0      60
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _caracter_inicio
     _envia_byte_lcd
       _envia_nibble_lcd
   _inicializa_lcd
     _envia_byte_lcd
     _envia_nibble_lcd
   _limpa_lcd
     _envia_byte_lcd
   _printf
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     _putch
       _escreve_lcd
         _envia_byte_lcd

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F     3C      3C       1       63.2%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
ABS                  0      0       0      18        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBIGSFRhh         6A      0       0      21        0.0%
BITBIGSFRhl          F      0       0      22        0.0%
BITBIGSFRl          21      0       0      23        0.0%
BIGRAM             7FF      0       0      24        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Sun Dec 04 10:49:33 2022

                      l31 0FAE                        l60 0F72                        l36 08C6  
                      l63 0F9A                        l57 0E8A                        l74 0F4E  
                      l66 0F8C                        l69 0F0C                        l95 0B30  
                     l108 0CD6                       l145 0D7A                       l138 0D6A  
                     l526 0E02                       l519 0DF2                       l860 0E78  
                     l862 0E80                       l864 0E82                       l856 0E06  
                     l858 0E08                       u300 0DB4                       u301 0DB0  
                     u310 0DD2                       u311 0DCE                       u320 0F24  
                     u400 0CB4                       u321 0F20                       u401 0CB0  
                     u330 0F3A                       u410 0CD6                       u331 0F36  
                     u411 0CD2                       u260 0CFE                       u340 0AD0  
                     u420 091C                       u261 0CFA                       u341 0ACC  
                     u421 0918                       u270 0D20                       u350 0B3E  
                     u430 0974                       u255 0F5A                       u271 0D1C  
                     u351 0B3A                       u431 0970                       u256 0F5C  
                     u280 0D48                       u360 0B92                       u440 099C  
                     u281 0D44                       u361 0B8E                       u441 0998  
                     u290 0D92                       u370 0BE0                       u450 09C8  
                     u291 0D8E                       u371 0BDC                       u451 09C4  
                     u507 0954                       u380 0BF8                       u460 09DA  
                     u381 0BF4                       u517 0A58                       u461 09D6  
                     u390 0C0E                       u470 0A38                       u527 0F84  
                     u391 0C0A                       u471 0A34                       u480 0AAA  
                     u537 0E9C                       u481 0AA6                       u547 0EB2  
                     u557 0EC4                       u567 0EE6                       u577 0E7A  
                     u497 0928                       u587 0E84                       wreg 000FE8  
                    l1102 0F52                      l1110 0F90                      l1104 0F5C  
                    l1120 0D06                      l1112 0FA8                      l1200 0AE2  
                    l1106 0F62                      l1130 0D58                      l1122 0D12  
                    l1114 0CD8                      l1210 0B62                      l1108 0F6A  
                    l1132 0D5A                      l1124 0D20                      l1116 0CE8  
                    l1140 0D9A                      l1220 0BA6                      l1212 0B7C  
                    l1204 0AE4                      l1300 09B6                      l1134 0D64  
                    l1126 0D2A                      l1118 0CFE                      l1150 0DEC  
                    l1142 0DA6                      l1230 0BE4                      l1214 0B84  
                    l1206 0B3E                      l1310 0A2A                      l1302 09C8  
                    l1160 0EC2                      l1152 0E8C                      l1128 0D48  
                    l1144 0DB4                      l1136 0D7C                      l1240 0C1E  
                    l1232 0BE6                      l1216 0B92                      l1208 0B56  
                    l1320 0A64                      l1312 0A38                      l1304 09DA  
                    l1170 0EF8                      l1162 0ECA                      l1154 0E96  
                    l1146 0DD2                      l1138 0D92                      l1242 0C94  
                    l1234 0BF8                      l1226 0BAA                      l1218 0B96  
                    l1330 0A88                      l1322 0A68                      l1314 0A3E  
                    l1306 09E8                      l1180 0F14                      l1172 0F02  
                    l1164 0ED0                      l1156 0EA6                      l1148 0DE2  
                    l1244 0C9A                      l1236 0C0E                      l1324 0A68  
                    l1316 0A42                      l1308 0A04                      l1332 0A98  
                    l1260 08A4                      l1252 087A                      l1190 0F44  
                    l1182 0F24                      l1166 0ED6                      l1158 0EAC  
                    l1174 0F74                      l1238 0C14                      l1246 0CB4  
                    l1326 0A72                      l1318 0A4E                      l1270 091E  
                    l1262 08B0                      l1254 0892                      l1184 0F28  
                    l1168 0EEE                      l1176 0F7E                      l1192 0AB2  
                    l1328 0A7E                      l1280 0952                      l1272 0934  
                    l1264 08BA                      l1256 0896                      l1186 0F3A  
                    l1178 0F10                      l1338 0B0A                      l1194 0ABE  
                    l1290 098C                      l1282 095A                      l1274 0936  
                    l1266 090E                      l1258 089A                      l1188 0F3E  
                    l1196 0AD0                      l1292 098E                      l1284 0966  
                    l1276 093A                      l1268 091C                      l1198 0ADA  
                    l1294 099C                      l1286 0974                      l1278 0946  
                    l1296 09A4                      l1288 097C                      l1298 09B4  
                    STR_1 0856                      STR_2 0862                      STR_3 086D  
                    STR_4 0838                      STR_5 0847                      STR_6 0829  
                    STR_7 0856                      STR_8 0862               main@counter 0039  
            ?_escreve_lcd 0001    envia_byte_lcd@endereco 0004                      _main 087A  
                    fsr2h 000FDA                      fsr2l 000FD9                      prodh 000FF4  
                    prodl 000FF3                      start 0004   __end_of_caracter_inicio 0F50  
            ___param_bank 000000                     ?_main 0001           __end_of___lldiv 0D7C  
         __end_of___llmod 0E04                     _PORTB 000F81                     _PORTC 000F82  
                   _PORTD 000F83                     _TRISB 000F93                     _TRISC 000F94  
                   _TRISD 000F95           __end_of_dpowers 0829                     _putch 0FA6  
                   tablat 000FF5                     status 000FD8           __initialization 0F9C  
            __end_of_main 0AB2                    ??_main 0029             __activetblptr 000002  
        ___llmod@dividend 000E                    ?_putch 0001          _envia_nibble_lcd 0E04  
        ?_caracter_inicio 0005                 ??___lldiv 0009                 ??___llmod 0016  
                  isa$std 000001                    _printf 0AB2             main@pressedJ1 0033  
           main@pressedJ2 0035              __mediumconst 0000                    tblptrh 000FF7  
                  tblptrl 000FF6                    tblptru 000FF8                __accesstop 0060  
 __end_of__initialization 0F9C        envia_byte_lcd@dado 0003             ___rparam_used 000001  
            escreve_lcd@c 0005            __pcstackCOMRAM 0001             __end_of_putch 0FB0  
          _envia_byte_lcd 0F50                   ??_putch 0006                   ?_printf 0017  
  __end_of_envia_byte_lcd 0F74            _inicializa_lcd 0E8C                   __Hparam 0000  
    caracter_inicio@linha 0006                   __Lparam 0000                   ___lldiv 0CD8  
                 ___llmod 0D7C              __psmallconst 0800                   __pcinit 0F9C  
                 __ramtop 0800                   __ptext0 087A                   __ptext1 0AB2  
                 __ptext2 0FA6                   __ptext3 0F8E                   __ptext4 0D7C  
                 __ptext5 0CD8                   __ptext6 0F74                   __ptext7 0E8C  
                 __ptext8 0F0E                   __ptext9 0F50                   _dpowers 0801  
         ?_envia_byte_lcd 0003         __end_of_limpa_lcd 0F8E  __end_of_envia_nibble_lcd 0E8C  
  __end_of_inicializa_lcd 0F0E      end_of_initialization 0F9C             __Lmediumconst 0000  
         ___lldiv@divisor 0005           ___lldiv@counter 000D                   printf@c 0028  
                 printf@f 0017                   postdec2 000FDD                   postinc2 000FDE  
               _PORTBbits 000F81                 _PORTCbits 000F82                 _PORTDbits 000F83  
         ?_inicializa_lcd 0001                main@timeJ1 002B                main@timeJ2 002F  
          __end_of_printf 0CD8       start_initialization 0F9C             ??_escreve_lcd 0005  
         ___llmod@divisor 0012           ___llmod@counter 0016    caracter_inicio@posicao 0007  
                ??_printf 001D       __end_of_escreve_lcd 0F9C                  ?___lldiv 0001  
                ?___llmod 000E          ??_envia_byte_lcd 0004               __smallconst 0800  
       ?_envia_nibble_lcd 0001         ??_caracter_inicio 0006                 _limpa_lcd 0F74  
      ??_envia_nibble_lcd 0001                printf@flag 0023                printf@prec 001F  
        ??_inicializa_lcd 0005                ?_limpa_lcd 0001               _escreve_lcd 0F8E  
   caracter_inicio@coluna 0005                  __Hrparam 0000                  __Lrparam 0000  
                __ptext10 0E04                  isa$xinst 000000                 printf@val 0024  
               putch@data 0006               ??_limpa_lcd 0005          ___lldiv@dividend 0001  
                printf@ap 0021           _caracter_inicio 0F0E      envia_nibble_lcd@dado 0002  
        ___lldiv@quotient 0009           main@start_reset 0037  
